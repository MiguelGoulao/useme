/**
 */
package fr.tpt.useme.architecture.model.usemearch.provider;

import fr.tpt.useme.architecture.model.usemearch.util.UsemearchAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class UsemearchItemProviderAdapterFactory extends UsemearchAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public UsemearchItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tpt.useme.architecture.model.usemearch.EnvironmentSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnvironmentSpecificationItemProvider environmentSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tpt.useme.architecture.model.usemearch.EnvironmentSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnvironmentSpecificationAdapter() {
		if (environmentSpecificationItemProvider == null) {
			environmentSpecificationItemProvider = new EnvironmentSpecificationItemProvider(this);
		}

		return environmentSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tpt.useme.architecture.model.usemearch.ContextSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextSpecificationItemProvider contextSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tpt.useme.architecture.model.usemearch.ContextSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextSpecificationAdapter() {
		if (contextSpecificationItemProvider == null) {
			contextSpecificationItemProvider = new ContextSpecificationItemProvider(this);
		}

		return contextSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tpt.useme.architecture.model.usemearch.Dsl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DslItemProvider dslItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tpt.useme.architecture.model.usemearch.Dsl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDslAdapter() {
		if (dslItemProvider == null) {
			dslItemProvider = new DslItemProvider(this);
		}

		return dslItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tpt.useme.architecture.model.usemearch.ECoreAbstractSyntax} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ECoreAbstractSyntaxItemProvider eCoreAbstractSyntaxItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tpt.useme.architecture.model.usemearch.ECoreAbstractSyntax}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createECoreAbstractSyntaxAdapter() {
		if (eCoreAbstractSyntaxItemProvider == null) {
			eCoreAbstractSyntaxItemProvider = new ECoreAbstractSyntaxItemProvider(this);
		}

		return eCoreAbstractSyntaxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tpt.useme.architecture.model.usemearch.SiriusConcreteSyntax} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SiriusConcreteSyntaxItemProvider siriusConcreteSyntaxItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tpt.useme.architecture.model.usemearch.SiriusConcreteSyntax}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSiriusConcreteSyntaxAdapter() {
		if (siriusConcreteSyntaxItemProvider == null) {
			siriusConcreteSyntaxItemProvider = new SiriusConcreteSyntaxItemProvider(this);
		}

		return siriusConcreteSyntaxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tpt.useme.architecture.model.usemearch.User} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserItemProvider userItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tpt.useme.architecture.model.usemearch.User}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserAdapter() {
		if (userItemProvider == null) {
			userItemProvider = new UserItemProvider(this);
		}

		return userItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tpt.useme.architecture.model.usemearch.WorkPlace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkPlaceItemProvider workPlaceItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tpt.useme.architecture.model.usemearch.WorkPlace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkPlaceAdapter() {
		if (workPlaceItemProvider == null) {
			workPlaceItemProvider = new WorkPlaceItemProvider(this);
		}

		return workPlaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tpt.useme.architecture.model.usemearch.Computer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComputerItemProvider computerItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tpt.useme.architecture.model.usemearch.Computer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComputerAdapter() {
		if (computerItemProvider == null) {
			computerItemProvider = new ComputerItemProvider(this);
		}

		return computerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tpt.useme.architecture.model.usemearch.SoftwareTool} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoftwareToolItemProvider softwareToolItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tpt.useme.architecture.model.usemearch.SoftwareTool}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoftwareToolAdapter() {
		if (softwareToolItemProvider == null) {
			softwareToolItemProvider = new SoftwareToolItemProvider(this);
		}

		return softwareToolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.tpt.useme.architecture.model.usemearch.OperatingSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperatingSystemItemProvider operatingSystemItemProvider;

	/**
	 * This creates an adapter for a {@link fr.tpt.useme.architecture.model.usemearch.OperatingSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperatingSystemAdapter() {
		if (operatingSystemItemProvider == null) {
			operatingSystemItemProvider = new OperatingSystemItemProvider(this);
		}

		return operatingSystemItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (environmentSpecificationItemProvider != null) environmentSpecificationItemProvider.dispose();
		if (contextSpecificationItemProvider != null) contextSpecificationItemProvider.dispose();
		if (dslItemProvider != null) dslItemProvider.dispose();
		if (eCoreAbstractSyntaxItemProvider != null) eCoreAbstractSyntaxItemProvider.dispose();
		if (siriusConcreteSyntaxItemProvider != null) siriusConcreteSyntaxItemProvider.dispose();
		if (userItemProvider != null) userItemProvider.dispose();
		if (workPlaceItemProvider != null) workPlaceItemProvider.dispose();
		if (computerItemProvider != null) computerItemProvider.dispose();
		if (softwareToolItemProvider != null) softwareToolItemProvider.dispose();
		if (operatingSystemItemProvider != null) operatingSystemItemProvider.dispose();
	}

}
