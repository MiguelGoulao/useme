context UseMeSpecification{
	
	/*constraint nameIsDefined { //remove
      check : self.name.isDefined()

      message : 'Nome da atividade ' + self.eClass().name + ' nÃ£o definido.'
      	fix{
			   title:'Coloque nome na atividade ' + self.eClass.name
			      do{
			            var insertName := UserInput.prompt('Insira o nome: ');
			            if(insertName.isDefined){
			                 self.name:=insertName;
			            }
			         }
		}
      	
  	}*/
  	
  	constraint utilitySpecificationIsDefined { // Utility Specification  	  
      check : self.utilitySpecification.size() > 0

	  message : 'USE-ME Utility Error: Create Child "Specification" in Parent "Specification" if you would like to reuse some artefacts from an existing DSL under development.'
  	}
  	
  	critique nameFromUtilitySpecificationIsDefined { //for each Utility Specification a Name must be defined
      guard : self.satisfies("utilitySpecificationIsDefined") 
      
      check {
      	//var us;
      	for(ss in self.utilitySpecification){
      		if(ss.getName.isDefined()){
      			continue;
	      	}else{
	      		//us = ss;
				return false;
			}
      	}
		return true;
      }
	  message : 'USE-ME Utility Suggestion: "Name" of "Specification" should be set to better distinguish between different utility specifications.'
	  /*fix{
	  	title:'USE-ME Quick Fix: Insert Utility "Name".' 
		do{
			var name := UserInput.prompt('Name: ');
			if(name.isDefined){
				us.name:=name;
			}
		}
	 }*/
  	}
  	
  	constraint contextSpecificationIsDefined { // Context Specification
      check : self.contextSpecification.size() > 0

      message : 'USE-ME Context Error: Create Child "Context Specification" in Parent "Specification" to describe the DSL intended context of use.'
  	}
  	
  	critique nameFromContextSpecificationIsDefined { //for each Context Specification a Name must be defined
      guard : self.satisfies("contextSpecificationIsDefined") 
      
      check {
      	for(cs in self.contextSpecification){
      		if(cs.getName.isDefined()){
      			continue;
	      	}else{
	      		return false;
	      	}
      	}
      	return true;
      }
      message : 'USE-ME Context Suggestion: "Name" of "Context Specification" should be set to better distinguish between different context specifications.'
  	}
  	
  	constraint goalSpecificationIsDefined { // Goal Specification
  	  guard : self.satisfies("scenarioIsDefined")
  	  	
      check : self.goalSpecification.size() > 0

      message : 'USE-ME Goal Error: If you do not want to extend "Context Model" create Child "Goal Specification" in Parent "Specification" to specify the objectives of the user while using the DSL.'
  	}
  	
  	critique nameFromGoalSpecificationIsDefined { //for each Goal Specification a Name must be defined
      guard : self.satisfies("goalSpecificationIsDefined") 
      
      check {
      	for(gs in self.goalSpecification){
      		if(gs.getName.isDefined()){
      			continue;
	      	}else{
	      		return false;
	      	}
      	}
      	return true;
      }
      message : 'USE-ME Goal Suggestion: "Name" of "Goal Specification" should be set to better distinguish between different goal specifications.'
  	}
  	
  	constraint evaluationSpecificationIsDefined { // Evaluation Specification
  	  guard : self.satisfies("usabilityRequirementIsDefined")
  	  
      check : self.evaluationSpecification.size() > 0

      message : 'USE-ME Evaluation Error: If you do not want to extend "Goal Model" create Child "Evaluation Specification" in Parent "Specification" to evaluate the DSL.'
  	}
  	
  	critique nameFromEvaluationSpecificationIsDefined { //for each Evaluation Specification a Name must be defined
      guard : self.satisfies("evaluationSpecificationIsDefined") 
      
      check {
      	for(es in self.evaluationSpecification){
      		if(es.getName.isDefined()){
      			continue;
	      	}else{
	      		return false;
	      	}
      	}
      	return true;
      }
      message : 'USE-ME Evaluation Suggestion: "Name" of "Evaluation Specification" should be set to better distinguish between different evaluation specifications.'
  	}
  	
  	constraint interactionSpecificationOrSurveySpecificationIsDefined { // Interaction Specification
  	  guard : self.satisfies("processIsDefined")
  	
      check {
      	if(self.interactionSpecification.size() > 0 or self.surveySpecification.size() > 0){
      		return true;
      	}else
      		return false;
      }

      message : 'USE-ME Interaction/Survey Error: Create Child "Interaction Specification" and/or "Survey Specification" in Parent "Specification".'
  	}
  	
  	critique interactionSpecificationIsDefined { // Interaction Specification
  	  guard : self.satisfies("processIsDefined")
  	
      check : self.interactionSpecification.size() > 0

      message : 'USE-ME Interaction Suggestion: If you need to specify "Test Model" create Child "Interaction Specification" in Parent "Specification" to measure usability over concrete tasks that involve interaction with the DSL.'
  	}
  	
  	critique nameFromInteractionSpecificationIsDefined { //for each Interaction Specification a Name must be defined
      guard : self.satisfies("interactionSpecificationIsDefined") 
      
      check {
      	for(is in self.interactionSpecification){
      		if(is.getName.isDefined()){
      			continue;
	      	}else{
	      		return false;
	      	}
      	}
      	return true;
      }
      message : 'USE-ME Interaction Suggestion: "Name" of "Interaction Specification" should be set to better distinguish between different interaction specifications.'
  	}
  	
  	critique surveySpecificationIsDefined { // Survey Specification
  	  guard : self.satisfies("processIsDefined")
  	 
      check : self.surveySpecification.size() > 0

	  message : 'USE-ME Survey Suggestion: If you need to specify "Test Model" create Child "Survey Specification" in Parent "Specification" to support formative methods for measuring usability.'
  	}
  	
  	critique nameFromSurveySpecificationIsDefined { //for each Survey Specification a Name must be defined
      guard : self.satisfies("surveySpecificationIsDefined") 
      
      check {
      	for(ss in self.surveySpecification){
      		if(ss.getName.isDefined()){
      			continue;
	      	}else{
				return false;
			}
      	}
		return true;
      }
	  message : 'USE-ME Survey Suggestion: "Name" of "Survey Specification" should be set to better distinguish between different survey specifications.'
  	}
  	
  	constraint reportSpecificationIsDefined { // Report Specification
  	  guard : self.satisfies("interactionSpecificationIsDefined") or
  	          self.satisfies("surveySpecificationIsDefined")
  	
      check : self.reportSpecification.size() > 0

      message : 'USE-ME Report Error: If you do not need to specify "Test Model" or you already specify it create Child "Report Specification" in Parent "Specification" to construct a final report on the DSL evaluation.'
  	}
  	
  	critique nameFromReportSpecificationIsDefined { //for each Report Specification a Name must be defined
      guard : self.satisfies("reportSpecificationIsDefined") 
      
      check {
      	for(ss in self.reportSpecification){
      		if(ss.getName.isDefined()){
      			continue;
	      	}else{
				return false;
			}
      	}
		return true;
      }
      message : 'USE-ME Report Suggestion: "Name" of "Report Specification" should be set to better distinguish between different report specifications.'
  	}
  	
}

context UseMeSpecification{ //PACKAGE CONTEXT SPECIFICATION

	constraint contextModelIsDefined { //for each Context Specification a Context Model must be defined
      guard : self.satisfies("contextSpecificationIsDefined") 
      
      check {
      	var csName : String;
      	for(cs in self.getContextSpecification){
      		if(cs.getContextModel.size() >= 1){
      			continue;
      		}else
				csName = cs.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Context Error: Create Child "Context Model" in Parent "Context Specification ' + csName + '".'
  	}
  	
  	constraint cmNameFromContextModelIsDefined { //for each Context Model a CmName must be defined
      guard : self.satisfies("contextModelIsDefined") 
      
      check {
      	for(cs in self.getContextSpecification){
	    	for (cm in cs.getContextModel){
	      		if(cm.getCmName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	    }
	    return true;
      }
      message : 'USE-ME Context Error: "Cm Name" of "Context Model" must be set to differentiate from other context models.'
  	}
  	
  	constraint domainFromContextModelIsDefined { //for each Context Model a Domain must be defined
      guard : self.satisfies("contextModelIsDefined") 
      
      check {
      	var cmName : String;
      	for(cs in self.getContextSpecification){
	    	for (cm in cs.getContextModel){
	      		if(cm.getDomain.isDefined()){
	      			continue;
	      		}else
	      			cmName = cm.getCmName;
	      			return false;
	      		}
	    }
	    return true;
      }
      message : 'USE-ME Context Error: "Domain" of "Context Model ' + cmName + '" must be set to specify the DSL domain.'
  	}
  	
  	constraint contextProviderFromContextModelIsDefined { //for each Context Model a Context Provider must be defined
      guard : self.satisfies("contextModelIsDefined") 
      
      check {
      	var cmName : String;
      	for(cs in self.getContextSpecification){
	    	for (cm in cs.getContextModel){
	      		if(cm.getContextProvider.size() >= 1){
	      			continue;
	      		}else
	      			cmName = cm.getCmName;
	      			return false;
	      		}
	    }
	    return true;
      }
      message : 'USE-ME Context Error: "Context Provider" of "Context Model ' + cmName + '" must be set to specify the entity/stakeholder that provides information about the DSL.'
  	}
  	
  	critique languageFromContextModelIsAssociated { //if defined in Utility should be associated
      guard : self.satisfies("contextModelIsDefined") and
              self.satisfies("DSLIsDefined") and
      		  not(self.satisfies("goalSpecificationIsDefined"))
      
      check {
      	var cmName : String;
      	for(cs in self.getContextSpecification){
	    	for (cm in cs.getContextModel){
	      		if(cm.getLanguage.isDefined()){
	      			continue;
	      		}else
	      			cmName = cm.getCmName;
	      			return false;
	      		}
	    }
	    return true;
      }
      message : 'USE-ME Context Suggestion: "Language" of "Context Model ' + cmName + '" should be associated to represent the DSL under evaluation.'
  	}
  	
  	constraint contextEnvironmentFromContextModelIsAssociated { //for each Context Model a Context Environment must be associated
      guard : self.satisfies("environmentIsDefined") 
      
      check {
      	var cmName : String;
      	for(cs in self.getContextSpecification){
	    	for (cm in cs.getContextModel){
	      		if(cm.getContextEnvironment.size() >= 1){
	      			continue;
	      		}else
	      			cmName = cm.getCmName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Context Error: "Context Environment" of "Context Model ' + cmName + '" must be associated to define in which environment the DSL is going to be used.'
  	}
  	
  	constraint userHierarchyIsDefined { //for each Context Model an User Hierarchy must be defined
  		guard : self.satisfies("contextModelIsDefined") and
  			    self.satisfies("cmNameFromContextModelIsDefined") and
  			    self.satisfies("contextProviderFromContextModelIsDefined") and
  			    self.satisfies("domainFromContextModelIsDefined")
  		
  		check {
	      	var cmName : String;
	      	for(cs in self.getContextSpecification){
	      		for (cm in cs.getContextModel){
	      				if(cm.getUserHierarchy.isDefined()){
	      					continue;
	      				}else
	      					cmName = cm.getCmName;
	      					return false;
	      			
	      		}
	      	}
	      	return true;
      }
      message : 'USE-ME Context Error: Create Child "User Hierarchy" in Parent "Context Model ' + cmName + '" to prioritise the DSL users.'
  	}
  	
  	critique uhDescriptionFromUserHierarchyIsDefined { //for each User Hierarchy a Uh Description must be defined
  		guard : self.satisfies("userHierarchyIsDefined") and
      		  not(self.satisfies("goalSpecificationIsDefined"))
  				
  		check {
	      	for(cs in self.getContextSpecification){
	      		for (cm in cs.getContextModel){
	      			for(uh in cm.getUserHierarchy){
	      				if(uh.getUhDescription.isDefined()){
	      					continue;
	      				}else
	      					return false;
	      			}
	      		}
	      	}	
	      	return true;
      }
      message : 'USE-ME Context Suggestion: "Uh Description" of "User Hierarchy" should be set to describe the user hierarchy.'
  	}
  	
  	constraint userProfileFromUserHierarchyIsAssociated { //for each User Hierarchy a User Profile must be associated
  		guard : self.satisfies("userHierarchyIsDefined") and 
  				self.satisfies("userProfileIsDefined") and 
  				self.satisfies("subProfileFromEndUserAssociated")
  				
  		check {
      		var uhName : String;
	      	for(cs in self.getContextSpecification){
	      		for (cm in cs.getContextModel){
	      			for(uh in cm.getUserHierarchy){
	      				if(uh.getUserProfile.isDefined()){
	      					continue;
	      				}else
	      					uhName = uh.getUhDescription;
	      					return false;
	      			}
	      		}
	      	}	
	      	return true;
      }
      message : 'USE-ME Context Error: "User Profile" of "User Hierarchy ' + uhName + '" must be associated to define the user hierarchy root profile, it is suggested to associate the "DSL Stakeholder" as the user hierarchy root profile.'
  	}
  	
  	constraint userProfileSpecificationIsDefined { //for each Context Specification an User Profile Specification must be defined
      guard : self.satisfies("userHierarchyIsDefined") 
      
      check {
      	var csName : String;
      	for(cs in self.getContextSpecification){
      		if(cs.getUserProfileSpecification.size() >= 1){
      			continue;
      		}else
				csName = cs.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Context Error: Create Child "User Profile Specification" in Parent "Context Specification ' + csName + '" to specify who will use the DSL.'
  	}
  	
  	critique nameFromUserProfileSpecificationIsDefined { //for each User Profile Specification a Name must be defined
      guard : self.satisfies("userProfileSpecificationIsDefined") 
      
      check {
      	for(cs in self.getContextSpecification){
	    	for (ups in cs.getUserProfileSpecification){
	      		if(ups.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	    }
	    return true;
      }
      message : 'USE-ME Context Suggestion: "Name" of "User Profile Specification" should be set to better distinguish between different user profile specifications'
  	}
  	
  	constraint userProfileIsDefined { //for each User Profile Specification an User Profile must be defined
  		guard : self.satisfies("userProfileSpecificationIsDefined")
  		
  		check {
	      	var upsName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      				if(ups.getUserProfile.size() >= 2){
	      					continue;
	      				}else
	      					upsName = ups.getName;
	      					return false;
	      			
	      		}
	      	}
	      	return true;
      	}
      message : 'USE-ME Context Error: Create Child "User Profile" in "User Profile Specification ' + upsName + '" to specify the DSL end users, the new profiles have to be separated into at least two distinct groups.'
  	}
  	
  	critique nameFromUserProfileIsDefined { //for each User Profile a Name must be defined
  		guard : self.satisfies("userProfileIsDefined")
  				
  		check {
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(up in ups.getUserProfile){
	      				if(up.getName.isDefined()){
	      					continue;
	      				}else
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Name" of "User Profile" should be set to better distinguish between different user profiles.'
  	}
  	  	
  	critique DSLStakeholderIsDefined { //for each User Profile Specification an User Profile must be defined
  		guard : self.satisfies("userProfileSpecificationIsDefined") and
  		        (not(self.satisfies("nameDSLStakeholderIsDefined")))
  		
  		check {
	      	var upsName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      				if(ups.getUserProfile.size() >= 3){
	      					continue;
	      				}else
	      					upsName = ups.getName;
	      					return false;
	      			
	      		}
	      	}
	      	return true;
      	}
      message : 'USE-ME Context Suggestion: Create Child "User Profile" with Name "DSL Stakeholder" in "User Profile Specification ' + upsName + '" to specify the DSL root stakeholder.'
  	}
  	
  	critique nameDSLStakeholderIsDefined { //for each User Profile a Name must be defined
  		guard : self.satisfies("nameFromUserProfileIsDefined") //ja tem nome
  				
  		check {
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(up in ups.getUserProfile){
	      				if(up.getName.replaceAll("\\s+","").equalsIgnoreCase("DSL Stakeholder".replaceAll("\\s+",""))){ //ha 1 DSL Stakeholder
	      					return true;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return false;	
      }
      message : 'USE-ME Context Suggestion: Rename "Name" of "User Profile" to "DSL Stakeholder".'
  	}
  	
  	critique languageEngineerIsDefined { //for each User Profile Specification an User Profile must be defined
  		guard : self.satisfies("userProfileSpecificationIsDefined") and
  		        (not(self.satisfies("nameLanguageEngineerIsDefined")))
  		
  		check {
	      	var upsName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      				if(ups.getUserProfile.size() >= 4){
	      					continue;
	      				}else
	      					upsName = ups.getName;
	      					return false;
	      			
	      		}
	      	}
	      	return true;
      	}
      message : 'USE-ME Context Suggestion: Create Child "User Profile" with Name "Language Engineer" in "User Profile Specification ' + upsName + '" to specify the DSL language engineer.'
  	}
  	
  	critique nameLanguageEngineerIsDefined { //for each User Profile a Name must be defined
  		guard : self.satisfies("nameFromUserProfileIsDefined") //ja tem nome
  				
  		check {
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(up in ups.getUserProfile){
	      				if(up.getName.replaceAll("\\s+","").equalsIgnoreCase("Language Engineer".replaceAll("\\s+",""))){ //ha 1 Language Engineer
	      					return true;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return false;	
      }
      message : 'USE-ME Context Suggestion: Rename "Name" of "User Profile" to "Language Engineer".'
  	}
  	
  	critique domainExpertIsDefined { //for each User Profile Specification an User Profile must be defined
  		guard : self.satisfies("userProfileSpecificationIsDefined") and
  		        (not(self.satisfies("nameDomainExpertIsDefined")))
  		
  		check {
	      	var upsName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      				if(ups.getUserProfile.size() >= 5){
	      					continue;
	      				}else
	      					upsName = ups.getName;
	      					return false;
	      			
	      		}
	      	}
	      	return true;
      	}
      message : 'USE-ME Context Suggestion: Create Child "User Profile" with Name "Domain Expert" in "User Profile Specification ' + upsName + '" to specify the DSL domain expert.'
  	}
  	
  	critique nameDomainExpertIsDefined { //for each User Profile a Name must be defined
  		guard : self.satisfies("nameFromUserProfileIsDefined") //ja tem nome
  				
  		check {
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(up in ups.getUserProfile){
	      				if(up.getName.replaceAll("\\s+","").equalsIgnoreCase("Domain Expert".replaceAll("\\s+",""))){ //ha 1 Domain Expert
	      					return true;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return false;	
      }
      message : 'USE-ME Context Suggestion: Rename "Name" of "User Profile" to "Domain Expert".'
  	}
  	
  	critique expertEvaluatorIsDefined { //for each User Profile Specification an User Profile must be defined
  		guard : self.satisfies("userProfileSpecificationIsDefined") and
  		        (not(self.satisfies("nameExpertEvaluatorIsDefined")))
  		
  		check {
	      	var upsName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      				if(ups.getUserProfile.size() >= 6){
	      					continue;
	      				}else
	      					upsName = ups.getName;
	      					return false;
	      			
	      		}
	      	}
	      	return true;
      	}
      message : 'USE-ME Context Suggestion: Create Child "User Profile" with Name "Expert Evaluator" in "User Profile Specification ' + upsName + '" to specify the DSL expert evaluator.'
  	}
  	
  	critique nameExpertEvaluatorIsDefined { //for each User Profile a Name must be defined
  		guard : self.satisfies("nameFromUserProfileIsDefined") //ja tem nome
  				
  		check {
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(up in ups.getUserProfile){
	      				if(up.getName.replaceAll("\\s+","").equalsIgnoreCase("Expert Evaluator".replaceAll("\\s+",""))){ //ha 1 Expert Evaluator
	      					return true;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return false;	
      }
      message : 'USE-ME Context Suggestion: Rename "Name" of "User Profile" to "Expert Evaluator".'
  	}
  	
  	critique endUserIsDefined { //for each User Profile Specification an User Profile must be defined
  		guard : self.satisfies("userProfileSpecificationIsDefined") and
  		        (not(self.satisfies("nameEndUserIsDefined")))
  		
  		check {
	      	var upsName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      				if(ups.getUserProfile.size() >= 7){
	      					continue;
	      				}else
	      					upsName = ups.getName;
	      					return false;
	      			
	      		}
	      	}
	      	return true;
      	}
      message : 'USE-ME Context Suggestion: Create Child "User Profile" with Name "End User" in "User Profile Specification ' + upsName + '" to specify the DSL end user.'
  	}
  	
  	critique nameEndUserIsDefined { //for each User Profile a Name must be defined
  		guard : self.satisfies("nameFromUserProfileIsDefined") //ja tem nome
  				
  		check {
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(up in ups.getUserProfile){
	      				if(up.getName.replaceAll("\\s+","").equalsIgnoreCase("End User".replaceAll("\\s+",""))){ //ha 1 End User
	      					return true;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return false;	
      }
      message : 'USE-ME Context Suggestion: Rename "Name" of "User Profile" to "End User".'
  	}
  	
  	critique parentFromLanguageEngineerAssociated { //Language Engineer Parent should be DSL Stakeholder
  		guard : self.satisfies("nameFromUserProfileIsDefined")
  				
  		check {
  			var upName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(up in ups.getUserProfile){
	      				if(up.getName.equals("Language Engineer")){
	      					if(up.getParent.getName.includes("DSL Stakeholder")){
	      						return true;
	      					}else
	      						upName = up.getName;
	      						return false;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;
      }
      message : 'USE-ME Context Suggestion: "Parent" of "User Profile ' + upName + '" should be set to "DSL Stakeholder".'
  	}
  	
  	critique parentFromDomainExpertAssociated { //Domain Expert Parent should be DSL Stakeholder
  		guard : self.satisfies("nameFromUserProfileIsDefined")
  				
  		check {
  			var upName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(up in ups.getUserProfile){
	      				if(up.getName.equals("Domain Expert")){
	      					if(up.getParent.getName.includes("DSL Stakeholder")){
	      						return true;
	      					}else
	      						upName = up.getName;
	      						return false;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;
      }
      message : 'USE-ME Context Suggestion: "Parent" of "User Profile ' + upName + '" should be set to "DSL Stakeholder".'
  	}
  	
  	critique parentFromExpertEvaluatorAssociated { //Expert Evaluator Parent should be DSL Stakeholder
  		guard : self.satisfies("nameFromUserProfileIsDefined")
  				
  		check {
  			var upName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(up in ups.getUserProfile){
	      				if(up.getName.equals("Expert Evaluator")){
	      					if(up.getParent.getName.includes("DSL Stakeholder")){
	      						return true;
	      					}else
	      						upName = up.getName;
	      						return false;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;
      }
      message : 'USE-ME Context Suggestion: "Parent" of "User Profile ' + upName + '" should be set to "DSL Stakeholder".'
  	}
  	
  	critique parentFromEndUserAssociated { //End User Parent should be DSL Stakeholder
  		guard : self.satisfies("nameFromUserProfileIsDefined")
  				
  		check {
  			var upName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(up in ups.getUserProfile){
	      				if(up.getName.equals("End User")){
	      					if(up.getParent.getName.includes("DSL Stakeholder")){
	      						return true;
	      					}else
	      						upName = up.getName;
	      						return false;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;
      }
      message : 'USE-ME Context Suggestion: "Parent" of "User Profile ' + upName + '" should be set to "DSL Stakeholder".'
  	}
  	
  	constraint parentFromOtherEndUserAssociated { //All end users must have a parent
  		guard : self.satisfies("subProfileFromEndUserAssociated")
  				
  		check {
  			var upName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(up in ups.getUserProfile){
	      				if(not(up.getName.equals("DSL Stakeholder") or up.getName.equals("Domain Expert") or up.getName.equals("Expert Evaluator") or up.getName.equals("Language Engineer") or up.getName.equals("End User"))){
	      					if(up.getParent.size() >= 1){
	      						continue;
	      					}else
	      						upName = up.getName;
	      						return false;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;
      }
      message : 'USE-ME Context Error: "Parent" of "User Profile ' + upName + '" must be set.'
  	}
  	
  	constraint subProfileFromEndUserAssociated { //End User SubProfile should be associated
  		guard : self.satisfies("nameFromUserProfileIsDefined")
  				
  		check {
  			var upName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(up in ups.getUserProfile){
	      				if(up.getName.equals("End User")){
	      					if(up.getSubProfile.size() >= 2){
	      						continue;
	      					}else
	      						upName = up.getName;
	      						return false;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;
      }
      message : 'USE-ME Context Error: "Sub Profile" of "User Profile ' + upName + '" must be set into at least 2 new "End User" Sub Profiles.'
  	}
  	
  	critique dslStakeholderPriorityCheck { //check if DSL Stakeholder priority = high
  		guard : self.satisfies("nameDSLStakeholderIsDefined")
  				
  		check {
  			var upName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(up in ups.getUserProfile){
	      				if(up.getName.replaceAll("\\s+","").equalsIgnoreCase("DSL Stakeholder".replaceAll("\\s+",""))){ //DSL Stakeholder
	      					if(up.getPriority.getValue == 2){ //priority = high
	      						continue;
	      					}else
	      						upName = up.getName;
	      						return false;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;	
      }
  	  message : 'USE-ME Context Suggestion: Change the "Priority" of "User Profile ' + upName + '" to "High" level.'
  	}
  	
  	critique languageEngineerPriorityCheck { //check if Language Engineer priority = low
  		guard : self.satisfies("nameLanguageEngineerIsDefined")
  				
  		check {
  			var upName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(up in ups.getUserProfile){
	      				if(up.getName.replaceAll("\\s+","").equalsIgnoreCase("Language Engineer".replaceAll("\\s+",""))){ //Language Engineer
	      					if(up.getPriority.getValue == 0){ //priority = low
	      						continue;
	      					}else
	      						upName = up.getName;
	      						return false;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;	
      }
  	  message : 'USE-ME Context Suggestion: Change the "Priority" of "User Profile ' + upName + '" to "Low" level.'
  	}
  	
  	critique domainExpertPriorityCheck { //check if Domain Expert priority = medium
  		guard : self.satisfies("nameDomainExpertIsDefined")
  				
  		check {
  			var upName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(up in ups.getUserProfile){
	      				if(up.getName.replaceAll("\\s+","").equalsIgnoreCase("Domain Expert".replaceAll("\\s+",""))){ //Domain Expert
	      					if(up.getPriority.getValue == 1){ //priority = medium
	      						continue;
	      					}else
	      						upName = up.getName;
	      						return false;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;	
      }
  	  message : 'USE-ME Context Suggestion: Change the "Priority" of "User Profile ' + upName + '" to "Medium" level.'
  	}
  	
  	critique expertEvaluatorPriorityCheck { //check if Expert Evaluator priority = low
  		guard : self.satisfies("nameExpertEvaluatorIsDefined")
  				
  		check {
  			var upName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(up in ups.getUserProfile){
	      				if(up.getName.replaceAll("\\s+","").equalsIgnoreCase("Expert Evaluator".replaceAll("\\s+",""))){ //Expert Evaluator
	      					if(up.getPriority.getValue == 0){ //priority = low
	      						continue;
	      					}else
	      						upName = up.getName;
	      						return false;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;	
      }
  	  message : 'USE-ME Context Suggestion: Change the "Priority" of "User Profile ' + upName + '" to "Low" level.'
  	}
  	
  	critique endUserPriorityCheck { //check if End User priority = high
  		guard : self.satisfies("nameEndUserIsDefined")
  				
  		check {
  			var upName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(up in ups.getUserProfile){
	      				if(up.getName.replaceAll("\\s+","").equalsIgnoreCase("End User".replaceAll("\\s+",""))){ //End User
	      					if(up.getPriority.getValue == 2){ //priority = high
	      						continue;
	      					}else
	      						upName = up.getName;
	      						return false;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;	
      }
  	  message : 'USE-ME Context Suggestion: Change the "Priority" of "User Profile ' + upName + '" to "High" level.'
  	}
  	  	
  	constraint priorityFromUserProfileIsEqual { //for each User Profile a Name must be defined
  		guard : self.satisfies("subProfileFromEndUserAssociated")
  				
  		check {
  			var upName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(up in ups.getUserProfile){
	      				if(up.getSubProfile.size() >= 1){
	      					if((up.getSubProfile.getPriority.getValue).includes(up.getPriority.getValue)){
	      						continue;
	      					}else
	      						upName = up.getName;
	      						return false;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;	
      }
  	  message : 'USE-ME Context Error: Change the "Priority" of one "Sub Profile" of "User Profile ' + upName + '" to match the "Parent" priority level.'
  	}
  	
  	constraint profileTemplateFromUserProfileIsAssociated { //for each User Profile where priority= high a Profile Template must be associated
  		guard : self.satisfies("userProfileIsDefined") and 
  		        self.satisfies("profileTemplateIsDefined")
  				
  		check {
  			var upName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(up in ups.getUserProfile){
	      				if(up.getPriority.getValue == 2){ //Ã© high
	      					if(up.getProfileTemplate.size() >= 1){
	      						continue;
	      					}else
	      						upName = up.getName;
	      						return false;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Error: "Profile Template" of "User Profile ' + upName + '" must be associated to refer to a specific profile template.'
  	}
  	
  	constraint classifierFromUserProfileIsAssociated { //for each User Profile where priority= high&SubProfile>=1 a Classifier must be associated
  		guard : self.satisfies("userProfileIsDefined") and 
  		        self.satisfies("logicalExpressionIsDefined") and
  		        self.satisfies("classifiersFromProfileTemplateIsAssociated")
  				
  		check {
  			var upName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(up in ups.getUserProfile){
	      				if(up.getPriority.getValue == 2 and up.getSubProfile.size() >= 1){ //priority= high&SubProfile>=1
	      					if(up.getClassifier.size() >= 1){
	      						continue;
	      					}else
	      						upName = up.getName;
	      						return false;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Error: "Classifier" of "User Profile ' + upName + '" should be associated to the "Logical Expression" which classify the sub-profiles in distinct sets.'
  	}
  	
  	constraint profileTemplateIsDefined { //for each User Profile Specification a Profile Template must be defined
  		guard : self.satisfies("userProfileFromUserHierarchyIsAssociated") and
  				self.satisfies("nameDSLStakeholderIsDefined") and
  				self.satisfies("nameLanguageEngineerIsDefined") and
  				self.satisfies("nameDomainExpertIsDefined") and
  				self.satisfies("nameExpertEvaluatorIsDefined") and
  				self.satisfies("nameEndUserIsDefined")
  		
  		check {
	      	var upsName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      				if(ups.getProfileTemplate.size() >= (ups.getUserProfile.size()-3)){
	      					continue;
	      				}else
	      					upsName = ups.getName;
	      					return false;
	      			
	      		}
	      	}
	      	return true;
      	}
      	message : 'USE-ME Context Error: Create Child "Profile Template" in Parent "User Profile Specification ' + upsName + '" for each new End User Sub Profile and for each User Profile with "Priority High".'
  	}
  	
  	critique nameFromProfileTemplateIsDefined { //for each Profile Template a Name must be defined
  		guard : self.satisfies("profileTemplateIsDefined")
  				
  		check {
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(pt in ups.getProfileTemplate){
	      				if(pt.getName.isDefined()){
	      					continue;
	      				}else
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Name" of "Profile Template" should be set to better distinguish between different profile templates.'
  	} 
  	
  	critique categoryFromProfileTemplateIsDefined { //for each Profile Template a Category must be defined
  		guard : self.satisfies("profileTemplateIsDefined")
  				
  		check {
  			var ptName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(pt in ups.getProfileTemplate){
	      				if(pt.getCategory.isDefined()){
	      					continue;
	      				}else
	      					ptName = pt.getName;
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
  	  message : 'USE-ME Context Suggestion: "Category" of "Profile Template ' + ptName + '" should be set to specify the profile template category (e.g. demographic data, education, expected knowledge set)'
  	}
  	
  	constraint classifiersFromProfileTemplateIsAssociated { //for each Profile Template a Classifiers must be associated
  		guard : self.satisfies("profileTemplateIsDefined") and 
  		        self.satisfies("expressionFromLogicalExpressionIsDefined")
  				
  		check {
  			var ptName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(pt in ups.getProfileTemplate){
	      				if(pt.getClassifiers.size() >= 1){
	      					continue;
	      				}else
	      					ptName = pt.getName;
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Error: "Classifiers" of "Profile Template ' + ptName + '" should be associated to define which classifiers apply to a specific profile template.'
  	}
  	
  	constraint logicalExpressionIsDefined { //for each User Profile Specification a Logical Expression must be defined
  		guard : self.satisfies("profileTemplateFromUserProfileIsAssociated")
  		
  		check {
	      	var upsName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      				if(ups.getLogicalExpression.size() >= 1){
	      					continue;
	      				}else
	      					upsName = ups.getName;
	      					return false;
	      			
	      		}
	      	}
	      	return true;
      	}
      	message : 'USE-ME Context Error: Create Child "Logical Expression" in Parent "User Profile Specification ' + upsName + '" to justify the creation of new end user sub profiles (e.g. age, sex, school grade, programming, ...).'
  	}
  	
  	critique nameFromLogicalExpressionIsDefined { //for each Logical Expression a Name must be defined
  		guard : self.satisfies("logicalExpressionIsDefined")
  				
  		check {
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(le in ups.getLogicalExpression){
	      				if(le.getName.isDefined()){
	      					continue;
	      				}else
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Name" of "Logical Expression" should be set to better distinguish between different logical expressions.'
  	}
  	
  	critique classifierNameFromLogicalExpressionIsDefined { //for each Logical Expression a Classifier Name must be defined
  		guard : self.satisfies("logicalExpressionIsDefined")
  				
  		check {
  			var leName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(le in ups.getLogicalExpression){
	      				if(le.getClassifierName.isDefined()){
	      					continue;
	      				}else
	      					leName = le.getName;
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Classifier Name" of "Logical Expression ' + leName + '" should be set to better distinguish between different classifier expressions.'
  	}
  	
  	constraint expressionFromLogicalExpressionIsDefined { //for each Logical Expression an Expression must be defined
  		guard : self.satisfies("logicalExpressionIsDefined")
  				
  		check {
  			var leName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ups in cs.getUserProfileSpecification){
	      			for(le in ups.getLogicalExpression){
	      				if(le.getExpression.size() >= 1){
	      					continue;
	      				}else
	      					leName = le.getName;
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Error: "Expression" of "Logical Expression ' + leName + '" must be set it can contain concrete (e.g. age >7) or abstract (e.g. age = int) specifications.'
  	}
  	
  	constraint enviromentSpecificationIsDefined { //for each Context Specification an Enviroment Specification must be defined
      guard : self.satisfies("classifierFromUserProfileIsAssociated")
      
      check {
      	var csName : String;
      	for(cs in self.getContextSpecification){
      		if(cs.getEnviromentSpecification.size() >= 1){
      			continue;
      		}else
				csName = cs.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Context Error: Create Child "Enviroment Specification" in Parent "Context Specification ' + csName + '" to define where will the DSL be used.'
  	}
  	
  	critique nameFromEnviromentSpecificationIsDefined { //for each Enviroment Specification a Name must be defined
      guard : self.satisfies("enviromentSpecificationIsDefined") 
      
      check {
      	for(cs in self.getContextSpecification){
	    	for (es in cs.getEnviromentSpecification){
	      		if(es.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	    }
	    return true;
      }
      message : 'USE-ME Context Suggestion: "Name" of "Enviroment Specification" should be set to better distinguish between different enviroment specifications.'
  	}
  	
  	constraint environmentIsDefined { //for each Enviroment Specification an Enviroment must be defined
  		guard : self.satisfies("enviromentSpecificationIsDefined")
  		
  		check {
	      	var esName : String;
	      	for(cs in self.getContextSpecification){
	      		for (es in cs.getEnviromentSpecification){
	      				if((es.getTechnicalEnvironment.size() + es.getPhysicalEnvironment.size() + es.getSocialEnvironment.size()) >= 1){
	      					continue;
	      				}else
	      					esName = es.getName;
	      					return false;
	      			
	      		}
	      	}
	      	return true;
      	}
  	  	message : 'USE-ME Context Error: Create Child "Technical Environment" and/or "Physical Environment" and/or "Social Environment" in Parent "Enviroment Specification ' + esName + '" to specify in which environments the DSL is going to be used.'
  	}
  	
  	critique nameFromTechnicalEnvironmentIsDefined { //for each Technical Environment a Name must be defined
  		guard : self.satisfies("environmentIsDefined")
  				
  		check {
	      	for(cs in self.getContextSpecification){
	      		for (es in cs.getEnviromentSpecification){
	      			for(te in es.getTechnicalEnvironment){
	      				if(te.getName.isDefined()){
	      					continue;
	      				}else
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Name" of "Technical Environment" should be set to better distinguish between different technical enviroments.'
  	}
  	
  	critique outsideRefFromTechnicalEnvironmentIsAssociated { //for each Technical Environment an Outside Ref should be associated
  		guard : self.satisfies("environmentIsDefined") and
  		        self.satisfies("outsideRefIsDefined")
  				
  		check {
  			var teName : String;
	      	for(cs in self.getContextSpecification){
	      		for (es in cs.getEnviromentSpecification){
	      			for(te in es.getTechnicalEnvironment){
	      				if(te.getOutsideRef.isDefined()){
	      					continue;
	      				}else
	      					teName = te.getName; 
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Outside Ref" of "Technical Environment ' + teName + '" should be associated to define an outside reference for the environment.'
  	}
  	
  	critique nameFromPhysicalEnvironmentIsDefined { //for each Physical Environment a Name must be defined
  		guard : self.satisfies("environmentIsDefined")
  				
  		check {
	      	for(cs in self.getContextSpecification){
	      		for (es in cs.getEnviromentSpecification){
	      			for(te in es.getPhysicalEnvironment){
	      				if(te.getName.isDefined()){
	      					continue;
	      				}else
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Name" of "Physical Environment" should be set to better distinguish between different physical enviroments.'
  	}
  	
  	critique outsideRefFromPhysicalEnvironmentIsAssociated { //for each Physical Environment an Outside Ref should be associated
  		guard : self.satisfies("environmentIsDefined") and
  		        self.satisfies("outsideRefIsDefined")
  				
  		check {
  			var teName : String;
	      	for(cs in self.getContextSpecification){
	      		for (es in cs.getEnviromentSpecification){
	      			for(te in es.getPhysicalEnvironment){
	      				if(te.getOutsideRef.isDefined()){
	      					continue;
	      				}else
	      					teName = te.getName; 
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Outside Ref" of "Physical Environment ' + teName + '" should be associated to define an outside reference for the environment.'
  	}
  	
  	critique nameFromSocialEnvironmentIsDefined { //for each Social Environment a Name must be defined
  		guard : self.satisfies("environmentIsDefined")
  				
  		check {
	      	for(cs in self.getContextSpecification){
	      		for (es in cs.getEnviromentSpecification){
	      			for(te in es.getSocialEnvironment){
	      				if(te.getName.isDefined()){
	      					continue;
	      				}else
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Name" of "Social Environment" should be set to better distinguish between different social enviroments.'
  	}
  	
  	critique outsideRefFromSocialEnvironmentIsAssociated { //for each Social Environment an Outside Ref should be associated
  		guard : self.satisfies("environmentIsDefined") and
  		        self.satisfies("outsideRefIsDefined")
  				
  		check {
  			var teName : String;
	      	for(cs in self.getContextSpecification){
	      		for (es in cs.getEnviromentSpecification){
	      			for(te in es.getSocialEnvironment){
	      				if(te.getOutsideRef.isDefined()){
	      					continue;
	      				}else
	      					teName = te.getName; 
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Outside Ref" of "Social Environment ' + teName + '" should be associated to define an outside reference for the environment.'
  	}
  	
  	constraint enviromentalVariableIsDefined { //for each Environment Specification a Enviromental Variable must be defined
  		guard : self.satisfies("environmentIsDefined")
  		
  		check {
	      	var esName : String;
	      	for(cs in self.getContextSpecification){
	      		for (es in cs.getEnviromentSpecification){
	      			if(es.getEnviromentalVariable.size() >= 1){
	      				continue;
	      			}else
	      				esName = es.getName;
	      				return false;
	      		}
	      	}
	      	return true;
      	}
      message : 'USE-ME Context Error: Create Child "CE Variable" for each Technical, Physical and Social Environment in Parent "Enviroment Specification ' + esName + '" to represent an environment variable (e.g. operating system, computer, country).'
  	}
  	
  	critique nameFromEnviromentalVariableIsDefined { //for each Enviromental Variable a Name must be defined
  		guard : self.satisfies("enviromentalVariableIsDefined")
  				
  		check {
	      	for(cs in self.getContextSpecification){
	      		for (es in cs.getEnviromentSpecification){
	      			for(ev in es.getEnviromentalVariable){
	      				if(ev.getName.isDefined()){
	      					continue;
	      				}else
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Name" of "CE Variable" should be set to better distinguish between different CE variables.'
  	}
  	
  	critique typeFromEnviromentalVariableIsDefined { //for each Enviromental Variable a Type should be defined
  		guard : self.satisfies("enviromentalVariableIsDefined") 
  				
  		check {
  			var evName : String;
	      	for(cs in self.getContextSpecification){
	      		for (es in cs.getEnviromentSpecification){
	      			for(ev in es.getEnviromentalVariable){
	      				if(ev.getType.size() >= 1){
	      					continue;
	      				}else
	      					evName = ev.getName;
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Type" of "CE Variable ' + evName + '" should be set (e.g. OS = {Windows, Mac, Linux}).'
  	}
  	
  	critique mandatoryFromEnviromentalVariableIsDefined { //for each Enviromental Variable a Mandatory should be defined
  		guard : self.satisfies("enviromentalVariableIsDefined") and 
  		        (not(self.satisfies("workflowSpecificationIsDefined")))
  				
  		check {
  			var evName : String;
	      	for(cs in self.getContextSpecification){
	      		for (es in cs.getEnviromentSpecification){
	      			for(ev in es.getEnviromentalVariable){
	      				if(ev.isMandatory() == true){
	      					continue;
	      				}else
	      					evName = ev.getName;
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Mandatory" of "CE Variable ' + evName + '" should be set to true if the "CE Variable" is mandatory.'
  	}
  	
  	constraint composedElementIsDefined { //for each Enviromental Variable where type>=1 a Composed Element must be defined
  		guard : self.satisfies("enviromentalVariableIsDefined") 
  				
  		check {
  			var evName : String;
	      	for(cs in self.getContextSpecification){
	      		for (es in cs.getEnviromentSpecification){
	      			for(ev in es.getEnviromentalVariable){
	      				if(ev.getComposedElement.size() >= ev.getType.size()){
	      					continue;
	      				}else
	      					evName = ev.getName;
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Error: Create Child "CE Variable" in Parent "CE Variable ' + evName + '" to represent each type specified in "CE Variable ' + evName + '" type.'
  	}
  	
  	critique nameFromComposedElementIsDefined { //for each Composed Element a Name should be defined
  		guard : self.satisfies("composedElementIsDefined")
  				
  		check {
	      	for(cs in self.getContextSpecification){
	      		for (es in cs.getEnviromentSpecification){
	      			for(ev in es.getEnviromentalVariable){
	      				for(ce in ev.getComposedElement){
	      					if(ce.getName.isDefined()){
	      						continue;
	      					}else
	      						return false;
	      				}
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Name" of "CE Variable" should be set to better distinguish between different CE variables.'
  	}
  	
  	critique typeFromComposedElementIsDefined { //for each Composed Element a Type should be defined
  		guard : self.satisfies("composedElementIsDefined") and 
  		        (not(self.satisfies("workflowSpecificationIsDefined"))) 
  				
  		check {
  			var ceName : String;
	      	for(cs in self.getContextSpecification){
	      		for (es in cs.getEnviromentSpecification){
	      			for(ev in es.getEnviromentalVariable){
	      				for(ce in ev.getComposedElement){
	      					if(ce.getType.size() >= 1){
	      						continue;
	      					}else
	      						ceName = ce.getName;
	      						return false;
	      				}
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Type" of "CE Variable ' + ceName + '" should be set (e.g. Mac = {El Capitan, Yosemite}).'
  	}
  	
  	critique mandatoryFromEnviromentalVariableIsDefined { //for each Enviromental Variable a Mandatory should be defined
  		guard : self.satisfies("composedElementIsDefined") and 
  		        (not(self.satisfies("workflowSpecificationIsDefined")))
  				
  		check {
  			var ceName : String;
	      	for(cs in self.getContextSpecification){
	      		for (es in cs.getEnviromentSpecification){
	      			for(ev in es.getEnviromentalVariable){
	      				for(ce in ev.getComposedElement){
	      					if(ce.isMandatory == true){
	      						continue;
	      					}else
	      						ceName = ce.getName;
	      						return false;
	      				}
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Mandatory" of "CE Variable ' + ceName + '" should be set to true if the "CE Variable" is mandatory.'
  	}
  	
  	critique contextEnviromentFromEnviromentalVariableIsAssociated { //for each Enviromental Variable a Context Enviroment should be associated
  		guard : self.satisfies("enviromentalVariableIsDefined") and
  		        self.satisfies("environmentIsDefined")
  				
  		check {
  			var evName : String;
	      	for(cs in self.getContextSpecification){
	      		for (es in cs.getEnviromentSpecification){
	      			for(ev in es.getEnviromentalVariable){
	      				if(ev.getContextEnviroment.isDefined()){
	      					continue;
	      				}else
	      					evName = ev.getName;
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Context Enviroment" of "CE Variable ' + evName + '" should be associated (e.g. technical, physical or social environment).'
  	}
  	
  	constraint ceElementFromTechnicalEnvironmentIsAssociated { //for each Technical Environment a Ce Element must be associated
  		guard : self.satisfies("environmentIsDefined") and
  				self.satisfies("enviromentalVariableIsDefined")
  				
  		check {
      		var teName : String;
	      	for(cs in self.getContextSpecification){
	      		for (es in cs.getEnviromentSpecification){
	      			for(te in es.getTechnicalEnvironment){
	      				if(te.getCeElement.size() >= 1){
	      					continue;
	      				}else
	      					teName = te.getName;
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Error: "CE Element" of "Technical Environment ' + teName + '" must be associated to define which CE variables apply to technical environment.'
  	}
  	
  	constraint ceElementFromPhysicalEnvironmentIsAssociated { //for each Physical Environment a Ce Element must be associated
  		guard : self.satisfies("environmentIsDefined") and
  				self.satisfies("enviromentalVariableIsDefined")
  				
  		check {
      		var peName : String;
	      	for(cs in self.getContextSpecification){
	      		for (es in cs.getEnviromentSpecification){
	      			for(pe in es.getPhysicalEnvironment){
	      				if(pe.getCeElement.size() >= 1){
	      					continue;
	      				}else
	      					peName = pe.getName;
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Error: "CE Element" of "Physical Environment ' + peName + '" must be associated to define which CE variables apply to physical environment.'
  	}
  	
  	constraint ceElementFromSocialEnvironmentIsAssociated { //for each Social Environment a Ce Element must be associated
  		guard : self.satisfies("environmentIsDefined") and
  				self.satisfies("enviromentalVariableIsDefined")
  				
  		check {
      		var seName : String;
	      	for(cs in self.getContextSpecification){
	      		for (es in cs.getEnviromentSpecification){
	      			for(se in es.getSocialEnvironment){
	      				if(se.getCeElement.size() >= 1){
	      					continue;
	      				}else
	      					seName = se.getName;
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Error: "CE Element" of "Social Environment ' + seName + '" must be associated to define which CE variables apply to social environment.'
  	}
  	
  	constraint workflowSpecificationIsDefined { //for each Context Specification an Workflow Specification must be defined
      guard : self.satisfies("ceElementFromTechnicalEnvironmentIsAssociated") and 
      		  self.satisfies("ceElementFromPhysicalEnvironmentIsAssociated") and 
      		  self.satisfies("ceElementFromSocialEnvironmentIsAssociated")
      
      check {
      	var csName : String;
      	for(cs in self.getContextSpecification){
      		if(cs.getWorkflowSpecification.size() >= 1){
      			continue;
      		}else
				csName = cs.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Context Error: Create Child "Workflow Specification" in Parent "Context Specification ' + csName + '" to define how the DSL is expected to be used.'
  	}	
  	
  	critique nameFromWorkflowSpecificationIsDefined { //for each Workflow Specification a Name must be defined
      guard : self.satisfies("workflowSpecificationIsDefined") 
      
      check {
      	for(cs in self.getContextSpecification){
	    	for (ws in cs.getWorkflowSpecification){
	      		if(ws.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	    }
	    return true;
      }
      message : 'USE-ME Context Suggestion: "Name" of "Workflow Specification" should be set to better distinguish between different workflow specifications.'
  	}
  	
  	constraint workflowIsDefined { //for each Workflow Specification a Workflow must be defined
  		guard : self.satisfies("workflowSpecificationIsDefined")
  		
  		check {
	      	var wsName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ws in cs.getWorkflowSpecification){
	      				if(ws.getWorkflow.size() >= 1){
	      					continue;
	      				}else
	      					wsName = ws.getName;
	      					return false;
	      			
	      		}
	      	}
	      	return true;
      	}
      message : 'USE-ME Context Error: Create Child "Workflow" in Parent "Workflow Specification ' + wsName + '" to specify a group of tasks.'
  	}
  	
  	critique nameFromWorkflowIsDefined { //for each Workflow a Name must be defined
  		guard : self.satisfies("workflowIsDefined")
  				
  		check {
	      	for(cs in self.getContextSpecification){
	      		for (ws in cs.getWorkflowSpecification){
	      			for(w in ws.getWorkflow){
	      				if(w.getName.isDefined()){
	      					continue;
	      				}else
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Name" of "Workflow" should be set to better distinguish between different workflows.'
  	} 
  	
  	critique actorFromWorkflowIsAssociated { //for each Workflow an Actor must be associated
  		guard : self.satisfies("workflowIsDefined") and 
  		        self.satisfies("userProfileIsDefined")
  				
  		check {
  			var wName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ws in cs.getWorkflowSpecification){
	      			for(w in ws.getWorkflow){
	      				if(w.getActor.size() >= 1){
	      					continue;
	      				}else
	      					wName = w.getName;
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Actor" of "Workflow ' + wName + '" should be associated to define which user profiles perform the workflow.'
  	}
  	
  	critique contextElementFromWorkflowIsAssociated { //for each Workflow a Context Element must be associated
  		guard : self.satisfies("workflowIsDefined") and
  		        self.satisfies("enviromentalVariableIsDefined")
  				
  		check {
  			var wName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ws in cs.getWorkflowSpecification){
	      			for(w in ws.getWorkflow){
	      				if(w.getPriority.getValue == 2){ //high
	      					if(w.getContextElement.size() >= 1){
	      						continue;
	      					}else
	      						wName = w.getName;
	      						return false;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Context Element" of "Workflow ' + wName + '" should be associated to define environment elements that are relevant. '
  	}
  	
  	critique contextModelFromWorkflowIsAssociated { //for each Workflow an Context Model must be associated
  		guard : self.satisfies("workflowIsDefined") and 
  		        self.satisfies("contextModelIsDefined")
  				
  		check {
  			var wName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ws in cs.getWorkflowSpecification){
	      			for(w in ws.getWorkflow){
	      				if(w.getContextModel.size() >= 1){
	      					continue;
	      				}else
	      					wName = w.getName;
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Context Model" of "Workflow ' + wName + '" should be associated to define the context to which the workflow applies.'
  	}
  	
  	critique processModelFromWorkflowIsAssociated { //for each Workflow a Process Model should be associated
  		guard : self.satisfies("workflowIsDefined") and 
  		        self.satisfies("processModelIsDefined")
  				
  		check {
  			var wName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ws in cs.getWorkflowSpecification){
	      			for(w in ws.getWorkflow){
	      				if(w.getProcessModel.size() >= 1){
	      					continue;
	      				}else
	      					wName = w.getName;
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Process Model" of "Workflow ' + wName + '" should be associated to define which process models apply to the workflow.'
  	}
  	
  	critique priorityFromWorkflowIsDefined { //for each Workflow a Priority should be defined
  		guard : self.satisfies("workflowIsDefined") and 
  		        (not(self.satisfies("goalSpecificationIsDefined")))
  				
  		check {
  			var wName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ws in cs.getWorkflowSpecification){
	      			for(w in ws.getWorkflow){
	      				if(w.getPriority.getValue < 2){ //if priority = medium or low we should suggest to the user to change to high to give more importance to the workflow
	      					wName = w.getName;
	      					return false;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Priority" of "Workflow ' + wName + '" should be set to high if the workflow is very important.'
  	}
  	
  	constraint scenarioIsDefined { //for each Workflow with priority=high a Scenario must be defined
  		guard : self.satisfies("workflowIsDefined")
  				
  		check {
      		var wName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ws in cs.getWorkflowSpecification){
	      			for(w in ws.getWorkflow){
	      				if(w.getPriority.toString().equals("High")){
	      					if(w.getScenario.size() >= 1){
	      						continue;
	      					}else
	      						wName = w.getName;
	      						return false;
	      				}else 
	      					continue;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Error: Create Child "Scenario" in Parent "Workflow ' + wName + '" to represent concrete tasks (i.e. use cases).'
  	} 
  	
  	critique nameFromScenarioIsDefined { //for each Scenario a Name must be defined
  		guard : self.satisfies("scenarioIsDefined")
  				
  		check {
	      	for(cs in self.getContextSpecification){
	      		for (ws in cs.getWorkflowSpecification){
	      			for(w in ws.getWorkflow){
	      				for(s in w.getScenario){
	      					if(s.getName.isDefined()){
	      						continue;
	      					}else
	      						return false;
	      				}
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Suggestion: "Name" of "Scenario" should be set to better distinguish between different scenarios.'
  	} 
  	
  	critique docFromScenarioIsAssociated { //for each Scenario a Doc should be associated
  		guard : self.satisfies("scenarioIsDefined") and
  				self.satisfies("docIsDefined")
  				
  		check {
  			var sName : String;
	      	for(cs in self.getContextSpecification){
	      		for (ws in cs.getWorkflowSpecification){
	      			for(w in ws.getWorkflow){
	      				for(s in w.getScenario){
	      					if(s.getDoc.size() >= 1){
	      						continue;
	      					}else
	      						sName = s.getName;
	      						return false;
	      				}
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Context Error: "Doc" of "Scenario ' + sName + '" should be associated to define which documents apply to the scenario.'
  	}
  	
}

context UseMeSpecification{ //PACKAGE GOAL SPECIFICATION

	constraint goalModelIsDefined { //for each Goal Specification a Goal Model must be defined
      guard : self.satisfies("goalSpecificationIsDefined") 
      
      check {
      	var gsName : String;
      	for(gs in self.getGoalSpecification){
      		if(gs.getGoalModel.size() >= 1){
      			continue;
      		}else
				gsName = gs.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Goal Error: Create Child "Goal Model" in Parent "Goal Specification ' + gsName + '" to capture the various objectives of the system that should be achieved.'
  	}
  	
  	critique nameFromGoalModelIsDefined { //for each Goal Model a Name must be defined
      guard : self.satisfies("goalModelIsDefined") 
      
      check {
      	for(gs in self.getGoalSpecification){
	    	for (gm in gs.getGoalModel){
	      		if(gm.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	    }
	    return true;
      }
      message : 'USE-ME Goal Suggestion: "Name" of "Goal Model" should be set to better distinguish between different goal models.'
  	}
  	
  	critique languageFromGoalModelIsAssociated { //for each Goal Model a Language should be associated
      guard : self.satisfies("goalModelIsDefined") and 
      		  self.satisfies("DSLIsDefined")
      
      check {
      	var gmName : String;
      	for(gs in self.getGoalSpecification){
	    	for (gm in gs.getGoalModel){
	      		if(gm.getLanguage.isDefined()){
	      			continue;
	      		}else
	      			gmName = gm.getName;
	      			return false;
	      		}
	    }
	    return true;
      }
      message : 'USE-ME Goal Suggestion: "Language" of "Goal Model ' + gmName + '" should be set to better define the DSL to which the goal model applies.'
  	}
  	
  	constraint usabilityGoalQualityInUseIsDefined { //for each Goal Model an Usability Goal Quality in Use must be defined
  		guard : self.satisfies("goalModelIsDefined")
  		
  		check {
	      	var gmName : String;
	      	for(gs in self.getGoalSpecification){
	      		for (gm in gs.getGoalModel){
	      			if(gm.getUsabilityGoal.size() >= 1){ 
	      				continue;
	      			}else
	      				gmName = gm.getName;
	      				return false;
	      			
	      		}
	      	}
	      	return true;
      	}
      message : 'USE-ME Goal Error: Create Child "Usability Goal Quality in Use" in Parent "Goal Model ' + gmName + '" to define usability goal that is the highest level objective for the developed DSL.'
  	}
  	
  	constraint nameFromUsabilityGoalIsDefined { //for each Usability Goal there is only one Usability Goal with the name=Quality in Use
  		guard : self.satisfies("usabilityGoalIsDefined")
  				
  		check {
      		var ugName : String;
      		var counter : Integer = 0;
	      	for(gs in self.getGoalSpecification){
	      		for (gm in gs.getGoalModel){
	      			for(ug in gm.getUsabilityGoal){
	      				if(ug.getName.equals("Quality in Use")){ //if name=Quality in Use
	      					counter++; //increments the counter
	      					if(counter > 1){ //it is only allowed to have 1 UG Quality in Use
	      						ugName = ug.getName;
	      						return false;
	      					}else
	      						continue;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Goal Error: Rename "Usability Goal ' + ugName + '" only one Usability Goal Quality in Use can be defined.'
  	} 
  	
  	constraint usabilityGoalIsDefined { //for each Goal Model an Usability Goal must be defined
  		guard : self.satisfies("goalModelIsDefined")
  		
  		check {
	      	var gmName : String;
	      	for(gs in self.getGoalSpecification){
	      		for (gm in gs.getGoalModel){
	      			if(gm.getUsabilityGoal.size() >= 2){ 
	      				continue;
	      			}else
	      				gmName = gm.getName;
	      				return false;
	      			
	      		}
	      	}
	      	return true;
      	}
      message : 'USE-ME Goal Error: Create Child "Usability Goal" in Parent "Goal Model ' + gmName + '" to define "Usability Goal Quality in Use" subgoals.'
  	}
  	
  	constraint questionFromUsabilityGoalIsDefined { //for each Usability Goal a Question must be defined
  		guard : self.satisfies("usabilityGoalIsDefined")
  				
  		check {
      		var ugName : String;
	      	for(gs in self.getGoalSpecification){
	      		for (gm in gs.getGoalModel){
	      			for(ug in gm.getUsabilityGoal){
	      				if(ug.getQuestion.isDefined()){
	      					continue;
	      				}else
	      					ugName = ug.getName;
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Goal Error: "Question" of "Usability Goal ' + ugName + '" must be set.'
  	} 
  	
  	constraint subGoalFromUGQualityInUseIsDefined { //for each Usability Goal name="Quality in Use" a SubGoal must be defined
  		guard : self.satisfies("usabilityGoalIsDefined")
  				
  		check {
      		var ugName : String;
	      	for(gs in self.getGoalSpecification){
	      		for (gm in gs.getGoalModel){
	      			for(ug in gm.getUsabilityGoal){
	      				if(ug.getName.equals("Quality in Use")){
	      					if(ug.getSubGoal.size() >= 1){
	      						continue;
	      					}else
	      						ugName = ug.getName;
	      						return false;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Goal Error: "Sub Goal" of "Usability Goal ' + ugName + '" must be set since "Usability Goal Quality in Use" is the highest level objective.'
  	}
  	
  	constraint parentGoalFromUGIsDefined { //for each Usability Goal name!="Quality in Use" a ParentGoal must be defined
  		guard : self.satisfies("usabilityGoalIsDefined")
  				
  		check {
      		var ugName : String;
	      	for(gs in self.getGoalSpecification){
	      		for (gm in gs.getGoalModel){
	      			for(ug in gm.getUsabilityGoal){
	      				if(not(ug.getName.equals("Quality in Use"))){
	      					if(ug.getParentGoal.isDefined()){
	      						continue;
	      					}else
	      						ugName = ug.getName;
	      						return false;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Goal Error: "Parent Goal" of "Usability Goal ' + ugName + '" must be set to specify the usability goal parent.'
  	}
  	
  	constraint priotityFromUGQIUIsDefined { //for each Usability Goal name="Quality in Use" priority has to be set to high
  		guard : self.satisfies("usabilityGoalIsDefined")
  				
  		check {
      		var ugName : String;
	      	for(gs in self.getGoalSpecification){
	      		for (gm in gs.getGoalModel){
	      			for(ug in gm.getUsabilityGoal){
	      				if(ug.getName.equals("Quality in Use")){
	      					if(ug.getPriority.getValue == 2){ //is high
	      						continue;
	      					}else
	      						ugName = ug.getName;
	      						return false;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Goal Error: Change the "Priority" of "Usability Goal ' + ugName + '" to high since it is the highest goal.'
  	}
  	
  	constraint priotityFromUGSubGoalsIsEqual { //one of the UG sub goals has to be = to the parent priority
  		guard : self.satisfies("subGoalFromUGQualityInUseIsDefined") 
  				
  		check {
      		var ugName : String;
      		var priority : String;
	      	for(gs in self.getGoalSpecification){
	      		for (gm in gs.getGoalModel){
	      			for(ug in gm.getUsabilityGoal){
	      				if(ug.getSubGoal.size() >= 1){ //if the UG has subgoals
	      					if((ug.getSubGoal.getPriority.getValue).includes(ug.getPriority.getValue)){ 
	      						continue;
	      					}else
	      						ugName = ug.getName;
	      						priority = ug.getPriority.getName;
	      						return false;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Goal Error: Change the "Priority" of one "Usability Goal ' + ugName + '" sub goals to match the Parent "'+ priority +'" priority level.'
  	}
  	
  	critique providedFunctionalityFromUsabilityGoalIsAssociated { //for each Usability Goal where subgoals=0 and only one actor responsible a Provided Functionality should be associated
  		guard : self.satisfies("usabilityGoalIsDefined") and
  		        self.satisfies("functionalGoalIsDefined") and
  		        self.satisfies("responsibleActorFromUsabilityGoalQIUIsAssociated") and
  		        //self.satisfies("responsibleActorFromUsabilityGoalWithZeroSubGoalsIsAssociated") and
  		        self.satisfies("responsibleActorFromUsabilityGoalIsAssociated") and
  		        self.satisfies("responsibleActorExpertEvaluatorFromUsabilityGoalIsAssociated")
  				
  		check {
      		var ugName : String;
	      	for(gs in self.getGoalSpecification){
	      		for (gm in gs.getGoalModel){
	      			for(ug in gm.getUsabilityGoal){
	      				if(ug.getSubGoal.size() == 0){ //no subgoals
	      					if(ug.getResponsibleActor.size() == 1){ //only one responsible actor
	      						if(ug.getProvidedFunctionality.size() >= 1){
	      							continue;
	      						}else
	      							ugName = ug.getName;
	      							return false;
	      					}else
	      						continue;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Goal Suggestion: "Provided Functionality" of "Usability Goal ' + ugName + '" should be set to define the functional goal associated to the usability goal.'
  	} 
  	
  	constraint responsibleActorFromUsabilityGoalQIUIsAssociated { //for Usability Goal Quality in Use all Actors created should be associated
  		guard : self.satisfies("usabilityGoalIsDefined") and 
  		        self.satisfies("nameFromUsabilityGoalIsDefined") and
  		        self.satisfies("actorIsDefined") 
  				
  		check {
  			var ugName : String;
      		var aName : String;
	      	for(gs in self.getGoalSpecification){
	      		for (gm in gs.getGoalModel){
	      			for(ug in gm.getUsabilityGoal){	
	      				if(ug.getName.replaceAll("\\s+","").equalsIgnoreCase("Quality in Use".replaceAll("\\s+",""))){
	      					for(a in gs.getActor){
	      						if(ug.getResponsibleActor.includes(a)){
	      							continue;
	      						}else
	      							ugName = ug.getName;
	      							aName = a.getName;
	      							return false;
	      					}
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Goal Error: "Actor ' + aName + '" should be associated as "Responsible Actor" of "Usability Goal ' + ugName + '".'
  	} 
  	
  	/*critique responsibleActorFromUsabilityGoalWithZeroSubGoalsIsAssociated { //for Usability Goal with SubGoal.size()=0 should only be associated 1 Actor
  		guard : self.satisfies("usabilityGoalIsDefined") and 
  		        self.satisfies("nameFromUsabilityGoalIsDefined") and
  		        self.satisfies("actorIsDefined") and
  		        self.satisfies("subGoalFromUGQualityInUseIsDefined") and
  		        self.satisfies("parentGoalFromUGIsDefined") 
  				
  		check {
      		var ugName : String;
	      	for(gs in self.getGoalSpecification){
	      		for (gm in gs.getGoalModel){
	      			for(ug in gm.getUsabilityGoal){	
	      				if(ug.getSubGoal.size() == 0){ //no subgoals -> end nodes
	      					if(ug.getResponsibleActor.size() == 1){ //only one actor responsible
	      						continue;
	      					}else
	      						ugName = ug.getName;
	      						return false;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Goal Suggestion: "Responsible Actor" of "Usability Goal ' + ugName + '" should be only associated to one single actor since the Usability Goal does not have any sub goals.'
  	}*/
  	
  	critique responsibleActorFromUsabilityGoalIsAssociated { //for each Usability Goal a Responsible Actor should be associated
  		guard : self.satisfies("usabilityGoalIsDefined") and 
  		        self.satisfies("nameFromUsabilityGoalIsDefined") and
  		        self.satisfies("actorIsDefined") and
  		        self.satisfies("responsibleActorFromUsabilityGoalQIUIsAssociated")
  				
  		check {
      		var ugName : String;
	      	for(gs in self.getGoalSpecification){
	      		for (gm in gs.getGoalModel){
	      			for(ug in gm.getUsabilityGoal){	
	      				if(ug.getResponsibleActor.size() >= 1){ 
	      					continue;
	      				}else
	      					ugName = ug.getName;
	      					return false;
	      			}
	      		}
	      	}
	      	return true;	
      }
      message : 'USE-ME Goal Suggestion: "Responsible Actor" of "Usability Goal ' + ugName + '" should be associated.'
  	}
  	
  	critique responsibleActorExpertEvaluatorFromUsabilityGoalIsAssociated { //
  		guard : self.satisfies("usabilityGoalIsDefined") and 
  		        self.satisfies("nameFromUsabilityGoalIsDefined") and //UGQinU defined 
  		        self.satisfies("nameExpertEvaluatorFromActorIsDefined") and //Actor Expert Evaluator defined
  		        self.satisfies("responsibleActorFromUsabilityGoalQIUIsAssociated")
  				
  		check {
      		var ugName : String;
	      	for(gs in self.getGoalSpecification){
	      		for (gm in gs.getGoalModel){
	      			for(ug in gm.getUsabilityGoal){	
	      				if(not(ug.getName.equals("Quality in Use"))){ 
	      					if(ug.getResponsibleActor.size() == 1){ //single actor
	      						if(ug.getResponsibleActor.first.getName.replaceAll("\\s+","").equalsIgnoreCase("Expert Evaluator".replaceAll("\\s+",""))){
	      							return true;
	      						}else
	      							continue;
	      					}else
	      						continue;
	      				}else
	      					continue;
	      			}
	      		}
	      	}
	      	return false;	
      }
      message : 'USE-ME Goal Suggestion: "Actor Expert Evaluator" should be associated as single "Responsible Actor" of one "Usability Goal" without "Sub Goals".'
  	}
  	
  	constraint scopeIsDefined { //for each Goal Specification a Scope must be defined
      guard : self.satisfies("usabilityGoalQualityInUseIsDefined") and
      		  self.satisfies("usabilityGoalIsDefined") and
              self.satisfies("nameFromUsabilityGoalIsDefined") and
              self.satisfies("questionFromUsabilityGoalIsDefined") and
              self.satisfies("subGoalFromUGQualityInUseIsDefined") and
              self.satisfies("parentGoalFromUGIsDefined") and
              self.satisfies("priotityFromUGQIUIsDefined") and
              self.satisfies("priotityFromUGSubGoalsIsEqual")
      
      check {
      	var gsName : String;
      	for(gs in self.getGoalSpecification){
      		for(gm in gs.getGoalModel){
      			for(ug in gm.getUsabilityGoal){
      				if(ug.getName.replaceAll("\\s+","").equalsIgnoreCase("Quality in Use".replaceAll("\\s+",""))){
      					if(gs.getScope.size() >= ug.getSubGoal.size() + 1){
      						continue;
      					}else
      						gsName = gs.getName;
      						return false;
      				}else
      					continue;
      			}
      		}
      	}
      	return true;	
      }
      message : 'USE-ME Goal Error: Create Child "Scope" in Parent "Goal Specification ' + gsName + '" to associate the context of use to a certain "Usability Goal".'
  	}
  	
  	critique nameFromScopeIsDefined { //for each Scope a Name must be defined
      guard : self.satisfies("scopeIsDefined") 
      
      check {
      	for(gs in self.getGoalSpecification){
	    	for (s in gs.getScope){
	      		if(s.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	    }
	    return true;
      }
      message : 'USE-ME Goal Suggestion: "Name" of "Scope" should be set to better distinguish between different scopes.'
  	}
  	
  	critique userProfileFromScopeIsAssociated { //for each Scope an User Profile must be associated
      guard : self.satisfies("scopeIsDefined") 
      
      check {
      	var sName : String;
      	for(gs in self.getGoalSpecification){
	    	for (s in gs.getScope){
	      		if(s.getUserProfileSelection.size() >= 1){
	      			continue;
	      		}else
	      			sName = s.getName;
	      			return false;
	      		}
	     }
	     return true;	
      }
      message : 'USE-ME Goal Suggestion: "User Profile Selection" of "Scope ' + sName + '" must be associated to define to which user profile it applies to.'
  	}
  	
  	critique workflowFromScopeIsAssociated { //for each Scope a Workflow must be associated
      guard : self.satisfies("scopeIsDefined") 
      
      check {
      	var sName : String;
      	for(gs in self.getGoalSpecification){
	    	for (s in gs.getScope){
	      		if(s.getWorkflow.size() >= 1){
	      			continue;
	      		}else
	      			sName = s.getName;
	      			return false;
	      		}
	    }
	    return true;
      }
      message : 'USE-ME Goal Suggestion: "Workflow" of "Scope ' + sName + '" must be associated to define to which workflows it applies to.'
  	}
  	
  	critique contextEnvironmentFromScopeIsAssociated { //for each Scope a Context Environment must be associated
      guard : self.satisfies("scopeIsDefined") 
      
      check {
      	var sName : String;
      	for(gs in self.getGoalSpecification){
	    	for (s in gs.getScope){
	      		if(s.getContextEnvironment.size() >= 1){
	      			continue;
	      		}else
	      			sName = s.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Goal Suggestion: "Context Environment" of "Scope ' + sName + '" must be associated to define to which environments it applies to.'
  	}
  	
  	constraint contextModelFromScopeIsAssociated { //for each Scope a Context Model must be defined
      guard : self.satisfies("scopeIsDefined") 
      
      check {
      	var sName : String;
      	for(gs in self.getGoalSpecification){
	    	for (s in gs.getScope){
	      		if(s.getContextModel.isDefined()){
	      			continue;
	      		}else
	      			sName = s.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Goal Error: "Context Model" of "Scope ' + sName + '" must be associated to define to which context of use it applies to.'
  	}
  	
  	constraint usabilityGoalFromScopeIsAssociated { //for each Scope an Usability Goal must be associated
      guard : self.satisfies("scopeIsDefined") 
      
      check {
      	var sName : String;
      	for(gs in self.getGoalSpecification){
	    	for (s in gs.getScope){
	      		if(s.getUsabilityGoal.size() >= 1){
	      			continue;
	      		}else
	      			sName = s.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Goal Error: "Usability Goal" of "Scope ' + sName + '" must be associated to define to which usability goal it applies to.'
  	}
  	
  	constraint actorIsDefined { //for each Goal Specification an Actor must be defined
      guard : self.satisfies("scopeIsDefined") and
              self.satisfies("contextModelFromScopeIsAssociated") and
              self.satisfies("usabilityGoalFromScopeIsAssociated")
      
      check {
      	var gsName : String;
      	for(gs in self.getGoalSpecification){
      		if(gs.getActor.size() >= 1){
      			continue;
      		}else
				gsName = gs.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Goal Error: Create Child "Actor" in Parent "Goal Specification ' + gsName + '" which is a specialization of DSL stakeholder.'
  	}
  	
  	critique expertEvaluatorFromActorIsDefined { //for each Goal Specification an Actor = Expert Evaluator should be defined
      guard : self.satisfies("actorIsDefined") 
      
      check {
      	var gsName : String;
      	for(gs in self.getGoalSpecification){
      		if(gs.getActor.size() >= 2){
      			continue;
      		}else
				gsName = gs.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Goal Suggestion: Create Child "Actor" with Name "Expert Evaluator" in Parent "Goal Specification ' + gsName + '" to represent the language expert evaluator.'
  	}
  	
  	critique nameFromActorIsDefined { //for each Actor a Name must be defined
      guard : self.satisfies("actorIsDefined") 
      
      check {
      	for(gs in self.getGoalSpecification){
	    	for (a in gs.getActor){
	      		if(a.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	     }
	     return true;	
      }
      message : 'USE-ME Goal Suggestion: "Name" of "Actor" should be set to better distinguish between different actors.'
  	}
  	
  	critique nameExpertEvaluatorFromActorIsDefined { //for each Actor a Name=Expert Evaluator must be defined
      guard : self.satisfies("nameFromActorIsDefined") 
      
      check {
      	for(gs in self.getGoalSpecification){
	    	for (a in gs.getActor){
	      		if(a.getName.replaceAll("\\s+","").equalsIgnoreCase("Expert Evaluator".replaceAll("\\s+",""))){ //Expert Evaluator defined
	      			return true;
	      		}else
	      			continue;
	      		}
	     }
	     return false;	
      }
      message : 'USE-ME Goal Suggestion: Rename "Name" of "Actor" to "Expert Evaluator".'
  	}
  	
  	critique organizationFromActorIsDefined { //for each Actor an Organization must be defined
      guard : self.satisfies("actorIsDefined") 
      
      check {
      	var aName : String;
      	for(gs in self.getGoalSpecification){
	    	for (a in gs.getActor){
	      		if(a.getOrganization.isDefined()){
	      			continue;
	      		}else
	      			aName = a.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Goal Error: "Organization" of "Actor ' + aName + '" should be set to define the actor organization.'
  	}
  	
  	constraint stakeholderFromActorIsAssociated { //for each Actor a Stakeholder must be associated
      guard : self.satisfies("actorIsDefined") 
      
      check {
      	var aName : String;
      	for(gs in self.getGoalSpecification){
	    	for (a in gs.getActor){
	      		if(a.getStakeholder.size() >= 1){
	      			continue;
	      		}else
	      			aName = a.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Goal Error: "Stakeholder" of "Actor ' + aName + '" must be associated to define which DSL stakeholder is responsible.'
  	}
  	
  	critique sizeFromActorEEIsDefined { //Actor="Expert Evaluator" Stakeholder.size=1
      guard : self.satisfies("nameExpertEvaluatorFromActorIsDefined") and
      		  self.satisfies("stakeholderFromActorIsAssociated")
      
      check {
      	var aName : String;
      	for(gs in self.getGoalSpecification){
	    	for (a in gs.getActor){
	      		if(a.getName.replaceAll("\\s+","").equalsIgnoreCase("Expert Evaluator".replaceAll("\\s+",""))){ //Actor=Expert Evaluator
	      			if(a.getStakeholder.size() == 1){ //stakeholder size=1
	      				return true;
	      			}else
	      				aName = a.getName;
	      				return false;
	      		}else
	      			continue;
	      		}
	    }
      }
      message : 'USE-ME Goal Suggestion: "Stakeholder" of "Actor ' + aName + '" should only have "User Profile Expert Evaluator" has stakeholder.'
  	}
  	
  	critique stakeholderEEFromActorEEIsAssociated { //actor Expert Evaluator should only be associated to User Profile Expert Evaluator
      guard : self.satisfies("nameExpertEvaluatorFromActorIsDefined") and //from Actor Expert Evaluator
      		  self.satisfies("stakeholderFromActorIsAssociated") and
      		  self.satisfies("nameExpertEvaluatorIsDefined") and //from User Profile Expert Evaluator 
      		  self.satisfies("sizeFromActorEEIsDefined") //Stakeholder.size=1
      
      check {
      	var aName : String;
      	for(gs in self.getGoalSpecification){
	    	for (a in gs.getActor){
	      		if(a.getName.replaceAll("\\s+","").equalsIgnoreCase("Expert Evaluator".replaceAll("\\s+",""))){ //Actor=Expert Evaluator
	      			if(a.getStakeholder.getName.first.replaceAll("\\s+","").equalsIgnoreCase("Expert Evaluator".replaceAll("\\s+",""))){ //User profile=Expert Evaluator
	      				return true;
	      			}else
	      				aName = a.getName;
	      				return false;
	      		}else
	      			continue;
	      	}
	    }	
      }
      message : 'USE-ME Goal Suggestion: "Stakeholder" of "Actor ' + aName + '" should be associated to "User Profile Expert Evaluator".'
  	}
  	
  	constraint methodIsDefined { //for each Goal Specification a Method must be defined
      guard : self.satisfies("responsibleActorFromUsabilityGoalQIUIsAssociated") and
      		  self.satisfies("stakeholderFromActorIsAssociated")
      
      check {
      	var gsName : String;
      	for(gs in self.getGoalSpecification){
      		if(gs.getMethod.size() >= 1){
      			continue;
      		}else
				gsName = gs.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Goal Error: Create Child "Method" in Parent "Goal Specification ' + gsName + '" to define the measurable requirements that contribute to the achievement of the goal.'
  	}
  	
  	critique nameFromMethodIsDefined { //for each Method a Name must be defined
      guard : self.satisfies("methodIsDefined") 
      
      check {
      	for(gs in self.getGoalSpecification){
	    	for (m in gs.getMethod){
	      		if(m.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Goal Suggestion: "Name" of "Method" should be set to better distinguish between different methods.'
  	}
  	
  	constraint usabilityGoalFromMethodIsAssociated { //for each Method an Usability Goal must be associated
      guard : self.satisfies("methodIsDefined") and
              self.satisfies("usabilityGoalIsDefined")
      
      check {
      	var mName : String;
      	for(gs in self.getGoalSpecification){
	    	for (m in gs.getMethod){
	      		if(m.getUsabilityGoal.size() >= 1){
	      			continue;
	      		}else
	      			mName = m.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Goal Error: "Usability Goal" of "Method ' + mName + '" must be associated to define to which usability goal it contributes to achieve.'
  	}
  	
  	critique methodDescriptionFromMethodIsDefined { //for each Method a Method Description should be defined
      guard : self.satisfies("methodIsDefined") 
      
      check {
      	var mName : String;
      	for(gs in self.getGoalSpecification){
	    	for (m in gs.getMethod){
	      		if(m.getMethodDescription.isDefined()){
	      			continue;
	      		}else
	      			mName = m.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Goal Suggestion: "Method Description" of "Method ' + mName + '" should be set.'
  	}
  	
  	critique testCaseFromMethodIsAssociated { //for each Method a Test Case should be associated
      guard : self.satisfies("methodIsDefined") and
              self.satisfies("scenarioIsDefined")
      
      check {
      	var mName : String;
      	for(gs in self.getGoalSpecification){
	    	for (m in gs.getMethod){
	      		if(m.getTestCase.size() >= 1){
	      			continue;
	      		}else
	      			mName = m.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Goal Suggestion: "Test Case" of "Method ' + mName + '" should be associated as it can be used to evaluate the requirement.'
  	}
  	
  	critique functionalGoalFromMethodIsAssociated { //for each Method a Functional Goal should be associated
      guard : self.satisfies("methodIsDefined") and
              self.satisfies("functionalGoalIsDefined")
      
      check {
      	var mName : String;
      	for(gs in self.getGoalSpecification){
	    	for (m in gs.getMethod){
	      		if(m.getFunctionalGoal.size() >= 1){
	      			continue;
	      		}else
	      			mName = m.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Goal Suggestion: "Functional Goal" of "Method ' + mName + '" should be associated as it represents the funcionalities that are provided to support the execution of certain test cases.'
  	}
  	
  	critique usabilityRequirementFromMethodIsAssociated { //for each Method a Usability Requirement should be associated
      guard : self.satisfies("methodIsDefined") and
              self.satisfies("usabilityRequirementIsDefined")
      
      check {
      	var mName : String;
      	for(gs in self.getGoalSpecification){
	    	for (m in gs.getMethod){
	      		if(m.getUsabilityRequirement.size() >= 1){
	      			continue;
	      		}else
	      			mName = m.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Goal Suggestion: "Usability Requirement" of "Method ' + mName + '" should be associated to define which measurable requirements (i.e. usability requirements) that contribute to the achievement of the goal.'
  	}
  	
  	constraint usabilityRequirementIsDefined { //for each Goal Specification an Usability Requirement must be defined
      guard : self.satisfies("usabilityGoalFromMethodIsAssociated") 
      
      check {
      	var gsName : String;
      	for(gs in self.getGoalSpecification){
      		if(gs.getUsabilityRequirement.size() >= 1){
      			continue;
      		}else
				gsName = gs.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Goal Error: Create Child "Usability Requirement" in Parent "Goal Specification ' + gsName + '" to define the usability requirements that contribute to the achievement of the goal.'
  	}
  	
  	critique nameFromUsabilityRequirementIsDefined { //for each Usability Requirement a Name should be defined
      guard : self.satisfies("usabilityRequirementIsDefined") 
      
      check {
      	for(gs in self.getGoalSpecification){
	    	for (m in gs.getUsabilityRequirement){
	      		if(m.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Goal Suggestion: "Name" of "Usability Requirement" should be set to better distinguish between different usability requirements.'
  	}
  	
  	critique oldNameFromUsabilityRequirementIsDefined { //for each Usability Requirement an Old Name should be defined
      guard : self.satisfies("usabilityRequirementIsDefined") 
      
      check {
      	var urName : String;
      	for(gs in self.getGoalSpecification){
	    	for (m in gs.getUsabilityRequirement){
	      		if(m.getOld_name.isDefined()){
	      			continue;
	      		}else
	      			urName = m.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Goal Suggestion: "Old name" of "Usability Requirement ' + urName + '" should be set.'
  	}
  	
  	critique metricFromUsabilityRequirementIsDefined { //for each Usability Requirement a Metric should be defined
      guard : self.satisfies("usabilityRequirementIsDefined") 
      
      check {
      	var urName : String;
      	for(gs in self.getGoalSpecification){
	    	for (ur in gs.getUsabilityRequirement){
	      		if(ur.getMetric.size() >= 1){
	      			continue;
	      		}else
	      			urName = ur.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Goal Suggestion: "Metric" of "Usability Requirement ' + urName + '" should be set to define which metrics are going to be use to measure the requirement (e.g. Satisfaction = {satisfaction related questions, ...}).'
  	}
  	
  	critique descriptionFromUsabilityRequirementIsDefined { //for each Usability Requirement a Description should be defined
      guard : self.satisfies("usabilityRequirementIsDefined") 
      
      check {
      	var urName : String;
      	for(gs in self.getGoalSpecification){
	    	for (ur in gs.getUsabilityRequirement){
	      		if(ur.getDescription.isDefined()){
	      			continue;
	      		}else
	      			urName = ur.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Goal Suggestion: "Description" of "Usability Requirement ' + urName + '" should be set.'
  	}
  	
  	critique descriptionOldFromUsabilityRequirementIsDefined { //for each Usability Requirement a Description Old should be defined
      guard : self.satisfies("usabilityRequirementIsDefined") 
      
      check {
      	var urName : String;
      	for(gs in self.getGoalSpecification){
	    	for (ur in gs.getUsabilityRequirement){
	      		if(ur.getDescription_old.isDefined()){
	      			continue;
	      		}else
	      			urName = ur.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Goal Suggestion: "Description old" of "Usability Requirement ' + urName + '" should be set.'
  	}
  	
  	critique successCoverageIsDefined { //for each Goal Specification a Success Coverage must be defined
      guard : self.satisfies("goalModelIsDefined") and 
              self.satisfies("usabilityGoalIsDefined") and 
              self.satisfies("evaluationGoalIsDefined") and 
              self.satisfies("evaluationModelIsDefined") and 
              ((self.satisfies("interactionModelIsDefined") and self.satisfies("interactionResultIsDefined")) or 
              (self.satisfies("surveyModelIsDefined") and self.satisfies("surveyResultIsDefined"))) and
              self.satisfies("reportModelIsDefined") 
      
      check {
      	var gsName : String;
      	var ugName : String;
      	for(gs in self.getGoalSpecification){
      		for(gm in gs.getGoalModel){
      			for(ug in gm.getUsabilityGoal){
      				if(ug.getEvaluationGoal.size() >= 1){
      					for(eg in ug.getEvaluationGoal){
      						if(eg.getEvaluationModel.getTestModel.size() >= 1){ //test model exists
      							for (tm in eg.getEvaluationModel.getTestModel){
      								if(tm.isTypeOf(InteractionModel)){ //tm = InteractionModel
      									if(tm.getInteractionResult.size() >= 1 and gs.getSuccessCoverage.size() < 1){
      										gsName = gs.getName;
      										ugName = ug.getName;
      										return false;
      									}else
      										continue;
      								}else //tm = SurveyModel
      									if(tm.getSurveyResult.size() >= 1 and gs.getSuccessCoverage.size() < 1){
      										gsName = gs.getName;
      										ugName = ug.getName;
      										return false;
      									}else
      										continue;
      							}
      						}
      					}
      				}else
      					continue;
      			}
      		}
      	}
      	return true;	
      }
      message : 'USE-ME Goal Suggestion: Create Child "Success Coverage" in Parent "Goal Specification ' + gsName + '" for "Usability Goal ' + ugName + '".'
  	}
  	
  	critique nameFromSuccessCoverageIsDefined { //for each Success Coverage a Name must be defined
      guard : self.satisfies("successCoverageIsDefined") 
      
      check {
      	for(gs in self.getGoalSpecification){
	    	for (sc in gs.getSuccessCoverage){
	      		if(sc.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Goal Suggestion: "Name" of "Success Coverage" should be set to better distinguish between different success coverages.'
  	}
  	
  	constraint scopeFromSuccessCoverageIsDefined { //for each Success Coverage a Scope must be defined
      guard : self.satisfies("successCoverageIsDefined") 
      
      check {
      	var scName : String;
      	for(gs in self.getGoalSpecification){
	    	for (sc in gs.getSuccessCoverage){
	      		if(sc.getScope.size() >= 1){
	      			continue;
	      		}else
	      			scName = sc.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Goal Error: "Scope" of "Success Coverage ' + scName + '" must be associated.'
  	}
  	
  	constraint successFactorFromSuccessCoverageIsDefined { //for each Success Coverage a Success Factor must be defined
      guard : self.satisfies("successCoverageIsDefined") 
      
      check {
      	var scName : String;
      	for(gs in self.getGoalSpecification){
	    	for (sc in gs.getSuccessCoverage){
	      		if(sc.getSuccessFactor.size() >= 1){
	      			continue;
	      		}else
	      			scName = sc.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Goal Error: "Success Factor" of "Success Coverage ' + scName + '" must be associated.'
  	}
  	
  	constraint usabilityGoalFromSuccessCoverageIsDefined { //for each Success Coverage an Usability Goal must be defined
      guard : self.satisfies("successCoverageIsDefined") 
      
      check {
      	var scName : String;
      	for(gs in self.getGoalSpecification){
	    	for (sc in gs.getSuccessCoverage){
	      		if(sc.getUsabilityGoal.isDefined()){
	      			continue;
	      		}else
	      			scName = sc.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Goal Error: "Usability Goal" of "Success Coverage ' + scName + '" must be associated.'
  	}
  	
}

context UseMeSpecification{ //PACKAGE EVALUATION SPECIFICATION
  	
  	constraint evaluationModelIsDefined { //for each Evaluation Specification an Evaluation Model must be defined
      guard : self.satisfies("evaluationSpecificationIsDefined")
      
      check {
      	var esName : String;
      	for(es in self.getEvaluationSpecification){
      		if(es.getEvaluationModel.size() >= 1){
      			continue;
      		}else
				esName = es.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Evaluation Error: Create Child "Evaluation Model" in Parent "Evaluation Specification ' + esName + '" to express the purpose of evaluating a certain objective for the DSL in a specific context.'
  	}
  	
  	critique nameFromEvaluationModelIsDefined { //for each Evaluation Model a Name must be defined
      guard : self.satisfies("evaluationModelIsDefined") 
      
      check {
      	for(es in self.getEvaluationSpecification){
	    	for (em in es.getEvaluationModel){
	      		if(em.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Name" of "Evaluation Model" should be set to better distinguish between different evaluation models.'
  	}
  	
  	constraint evaluationGoalIsDefined { //for each Evaluation Specification an Evaluation Goal must be defined
      guard : self.satisfies("evaluationModelFromLanguageIsAssociated")
      
      check {
      	var esName : String;
      	for(es in self.getEvaluationSpecification){
      		if(es.getEvaluationGoal.size() >= 1){
      			continue;
      		}else
				esName = es.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Evaluation Error: Create Child "Evaluation Goal" in Parent "Evaluation Specification ' + esName + '" to define the experimental hypothesis and research questions.'
  	}
  	
  	critique nameFromEvaluationGoalIsDefined { //for each Evaluation Goal a Name must be defined
      guard : self.satisfies("evaluationGoalIsDefined") 
      
      check {
      	for(es in self.getEvaluationSpecification){
	    	for (eg in es.getEvaluationGoal){
	      		if(eg.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Name" of "Evaluation Goal" should be set to better distinguish between different evaluation goals..'
  	}
  	
  	constraint usabilityGoalFromEvaluationGoalIsAssociated { //for each Evaluation Goal an Usability Goal must be associated
      guard : self.satisfies("evaluationGoalIsDefined") and
              self.satisfies("usabilityGoalIsDefined") and
              self.satisfies("responsibleFromEvaluationGoalIsAssociated") 
      
      check {
      	var egName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (eg in es.getEvaluationGoal){
	      		if(eg.getUsabilityGoal.size() >= 1){
	      			continue;
	      		}else
	      			egName = eg.getName;
	      			return false;
	      		}
	    }
	    return true;
      }
      message : 'USE-ME Evaluation Error: "Usability Goal" of "Evaluation Goal ' + egName + '" must be associated to relate to the usability goals specified in goal model.'
  	}
  	
  	constraint usabilityGoalFromEvaluationGoalIsAssociatedCheck { //check if the actor responsible for the usability goal is really the actor responsible and if it is the only responsible actor
      guard : self.satisfies("usabilityGoalFromEvaluationGoalIsAssociated") and 
      		  self.satisfies("responsibleActorExpertEvaluatorFromUsabilityGoalIsAssociated") and
      		  self.satisfies("responsibleFromEvaluationGoalIsAssociated")
      
      check {
      	var egName : String;
      	var actor : String;
      	for(es in self.getEvaluationSpecification){
	    	for (eg in es.getEvaluationGoal){
	      		for(ug in eg.getUsabilityGoal){
	      			if(ug.getResponsibleActor.size() == 1){ //single actor
	      				if(ug.getResponsibleActor.getName.first.replaceAll("\\s+","").equalsIgnoreCase(eg.getResponsible.getName.replaceAll("\\s+",""))){
	      					continue;
	      				}else
	      					egName = eg.getName;
	      					actor = eg.getResponsible.getName;
	      					return false;
	      			}else
	      				egName = eg.getName;
	      				actor = eg.getResponsible.getName;
	      				return false;
	      		}
	      	}
	    }
	    return true;
      }
      message : 'USE-ME Evaluation Error: "Usability Goal" of "Evaluation Goal ' + egName + '" should correspond to "Usability Goal" associated to "Actor ' + actor + '" in which this "Actor" is the only responsible.'
  	}
  	
  	constraint evaluationModelFromEvaluationGoalIsAssociated { //for each Evaluation Goal an Evaluation Model must be associated
      guard : self.satisfies("evaluationGoalIsDefined") and
              self.satisfies("evaluationModelIsDefined") 
      
      check {
      	var egName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (eg in es.getEvaluationGoal){
	      		if(eg.getEvaluationModel.isDefined()){
	      			continue;
	      		}else
	      			egName = eg.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Error: "Evaluation Model" of "Evaluation Goal ' + egName + '" must be associated to relate to the evaluation model.'
  	}
  	
  	critique hypothesisFromEvaluationGoalIsDefined { //for each Evaluation Goal a Hypothesis should be defined
      guard : self.satisfies("evaluationGoalIsDefined") and 
              self.satisfies("researchQuestionFromEvaluationGoalIsDefined")
      
      check {
      	var egName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (eg in es.getEvaluationGoal){
	      		if(eg.getHypothesis.size() >= 1){
	      			continue;
	      		}else
	      			egName = eg.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Hypothesis" of "Evaluation Goal ' + egName + '" should be set to define the experimental hypothesis.'
  	}
  	
  	critique languageFromEvaluationGoalIsAssociated { //for each Evaluation Goal a Language should be associated
      guard : self.satisfies("evaluationGoalIsDefined") and
              self.satisfies("languageIsDefined") 
      
      check {
      	var egName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (eg in es.getEvaluationGoal){
	      		if(eg.getLanguage.size() >= es.getLanguage.size()){
	      			continue;
	      		}else
	      			egName = eg.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Language" of "Evaluation Goal ' + egName + '" should be associated to the languages defined.'
  	}
  	
  	critique comperativeFromEvaluationGoalIsDefined { //for each Evaluation Goal Comperative should be true if 2 or more languages were defined
      guard : self.satisfies("evaluationGoalIsDefined") and 
              self.satisfies("languageFromEvaluationGoalIsAssociated") and
              (not(self.satisfies("participantIsDefined")))
      
      check {
      	var egName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (eg in es.getEvaluationGoal){
	      		if(eg.getLanguage.size() > 1 and eg.isComperative){
	      			continue;
	      		}else
	      			egName = eg.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Comperative" of "Evaluation Goal ' + egName + '" should be set to true since evaluation goal was defined for more than one language.'
  	}
  	
  	critique mesurmentFromEvaluationGoalIsAssociated { //for each Evaluation Goal a Mesurment should be associated
      guard : self.satisfies("evaluationGoalIsDefined") and
              self.satisfies("methodIsDefined") and
              self.satisfies("hypothesisFromEvaluationGoalIsDefined")
      
      check {
      	var egName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (eg in es.getEvaluationGoal){
	      		if(eg.getMesurment.size() >= 1){
	      			continue;
	      		}else
	      			egName = eg.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Mesurment" of "Evaluation Goal ' + egName + '" should be associated to define which methods can be introduced as measurements.'
  	}
  	
  	critique problemDescriptionFromEvaluationGoalIsDefined { //for each Evaluation Goal a Problem Description should be defined
      guard : self.satisfies("evaluationGoalIsDefined") 
      
      check {
      	var egName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (eg in es.getEvaluationGoal){
	      		if(eg.getProblemDescription.isDefined()){
	      			continue;
	      		}else
	      			egName = eg.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Problem Description" of "Evaluation Goal ' + egName + '" should be set to describe the problem.'
  	}
  	
  	critique researchQuestionFromEvaluationGoalIsDefined { //for each Evaluation Goal a Research Question should be defined
      guard : self.satisfies("evaluationGoalIsDefined") and
              self.satisfies("problemDescriptionFromEvaluationGoalIsDefined")
      
      check {
      	var egName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (eg in es.getEvaluationGoal){
	      		if(eg.getResearchQuestion.size() >= 1){
	      			continue;
	      		}else
	      			egName = eg.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Research Question" of "Evaluation Goal ' + egName + '" should be set to specify the research question.'
  	}
  	
  	constraint responsibleFromEvaluationGoalIsAssociated { //for each Evaluation Goal a Responsible should be associated
      guard : self.satisfies("evaluationGoalIsDefined") and 
              self.satisfies("actorIsDefined") and 
              self.satisfies("nameExpertEvaluatorFromActorIsDefined") 
      
      check {
      	var egName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (eg in es.getEvaluationGoal){
	      		if(eg.getResponsible.isDefined() and eg.getResponsible.getName.replaceAll("\\s+","").equalsIgnoreCase("Expert Evaluator".replaceAll("\\s+",""))){
	      			continue;
	      		}else
	      			egName = eg.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Error: "Responsible" of "Evaluation Goal ' + egName + '" should be associated to "Actor Expert Evaluator".'
  	}
  	
  	critique usabilityRequirementFromEvaluationGoalIsAssociated { //for each Evaluation Goal an Usability Requirement should be associated
      guard : self.satisfies("evaluationGoalIsDefined") and 
              self.satisfies("usabilityRequirementIsDefined")
      
      check {
      	var egName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (eg in es.getEvaluationGoal){
	      		if(eg.getUsabilityRequirement.isDefined()){
	      			continue;
	      		}else
	      			egName = eg.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Usability Requirement" of "Evaluation Goal ' + egName + '" should be associated to specify which usability requirements are being evaluated.'
  	}
  	
  	constraint languageIsDefined { //for each Evaluation Specification a Language must be defined
      guard : self.satisfies("evaluationModelIsDefined")
      
      check {
      	var esName : String;
      	for(es in self.getEvaluationSpecification){
      		if(es.getLanguage.size() >= 1){
      			continue;
      		}else
				esName = es.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Evaluation Error: Create Child "Language" in Parent "Evaluation Specification ' + esName + '" to define the language under evaluation.'
  	}
  	
  	critique comparativeLanguageIsDefined { //for each Evaluation Specification a Language must be defined
      guard : self.satisfies("evaluationModelIsDefined") and 
      		  (not(self.satisfies("evaluationGoalIsDefined")))	 
      
      check {
      	var esName : String;
      	for(es in self.getEvaluationSpecification){
      		if(es.getLanguage.size() >= 2){
      			continue;
      		}else
				esName = es.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Evaluation Suggestion: Create Child "Language" in Parent "Evaluation Specification ' + esName + '" to compare another language with the language under evaluation.'
  	}
  	
  	critique nameFromLanguageIsDefined { //for each Language a Name must be defined
      guard : self.satisfies("languageIsDefined") 
      
      check {
      	for(es in self.getEvaluationSpecification){
	    	for (l in es.getLanguage){
	      		if(l.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Name" of "Language" should be set to better distinguish between different languages.'
  	}
  	
  	critique versionFromLanguageIsDefined { //for each Language a Version should be defined
      guard : self.satisfies("languageIsDefined") 
      
      check {
      	var lName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (l in es.getLanguage){
	      		if(l.getVersion.isDefined()){
	      			continue;
	      		}else
	      			lName = l.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Version" of "Language ' + lName + '" should be set to define language version.'
  	}
  	
  	critique DSLFromLanguageIsAssociated { //for each Language a DSL should be defined
      guard : self.satisfies("languageIsDefined") and
      		  self.satisfies("DSLIsDefined")
      
      check {
      	var lName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (l in es.getLanguage){
	      		if(l.getDSL.isDefined()){
	      			continue;
	      		}else
	      			lName = l.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "DSL" of "Language ' + lName + '" should be associated to define to which DSL applies to language.'
  	}
  	
  	constraint evaluationModelFromLanguageIsAssociated { //for each Language an Evaluation Model must be associated
      guard : self.satisfies("languageIsDefined") and
      		  self.satisfies("evaluationModelIsDefined")
      
      check {
      	var lName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (l in es.getLanguage){
	      		if(l.getEvaluationModel.size() >= 1){
	      			continue;
	      		}else
	      			lName = l.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Error: "Evaluation Model" of "Language ' + lName + '" must be associated to define the language evaluation model.'
  	}
  	
  	constraint participantIsDefined { //for each Evaluation Specification a Participant must be defined
      guard : self.satisfies("evaluationGoalIsDefined")
      
      check {
      	var esName : String;
      	for(es in self.getEvaluationSpecification){
      		if(es.getParticipant.size() >= 1){
      			continue;
      		}else
				esName = es.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Evaluation Error: Create Child "Participant" in Parent "Evaluation Specification ' + esName + '" to define the study participants.'
  	}
  	
  	critique nameFromParticipantIsDefined { //for each Participant a Name must be defined
      guard : self.satisfies("participantIsDefined") 
      
      check {
      	for(es in self.getEvaluationSpecification){
	    	for (p in es.getParticipant){
	      		if(p.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Name" of "Participant" should be set to better distinguish between different participants.'
  	}
  	
  	constraint contactFromParticipantIsDefined { //for each Participant a Contact must be defined
      guard : self.satisfies("participantIsDefined") 
      
      check {
      	var pName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (p in es.getParticipant){
	      		if(p.getContact.size() >= 1){
	      			continue;
	      		}else
	      			pName = p.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Error: "Contact" of "Participant ' + pName + '" must be set to store information (e.g. email, phone, ...) about the participant.'
  	}
  	
  	constraint userProfileFromParticipantIsAssociated { //for each Participant an User Profile must be associated
      guard : self.satisfies("participantIsDefined") and 
      		  self.satisfies("userProfileIsDefined")
      
      check {
      	var pName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (p in es.getParticipant){
	      		if(p.getUserProfile.size() >= 1){
	      			continue;
	      		}else
	      			pName = p.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Error: "User Profile" of "Participant ' + pName + '" must be associated to match a specific "User Profile" end user.'
  	}
  	
  	constraint evaluationModelFromParticipantIsAssociated { //for each Participant an Evaluation Model must be associated
      guard : self.satisfies("participantIsDefined") and
              self.satisfies("evaluationModelIsDefined")
      
      check {
      	var pName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (p in es.getParticipant){
	      		if(p.getEvaluationModel.size() >= 1){
	      			continue;
	      		}else
	      			pName = p.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Error: "Evaluation Model" of "Participant ' + pName + '" must be associated to match a specific evaluation model.'
  	}
  	
  	constraint evaluationContextIsDefined { //for each Evaluation Specification an Evaluation Context must be defined
      guard : self.satisfies("evaluationGoalIsDefined") and
      		  self.satisfies("participantIsDefined") and
      		  self.satisfies("languageIsDefined")
      
      check {
      	var esName : String;
      	for(es in self.getEvaluationSpecification){
      		if(es.getEvaluationContext.size() >= 1){
      			continue;
      		}else
				esName = es.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Evaluation Error: Create Child "Evaluation Context" in Parent "Evaluation Specification ' + esName + '" to specify the user profiles, workflows, context environments taken into consideration during the experiment execution.'
  	}
  	
  	critique nameFromEvaluationContextIsDefined { //for each Evaluation Context a Name must be defined
      guard : self.satisfies("evaluationContextIsDefined") 
      
      check {
      	for(es in self.getEvaluationSpecification){
	    	for (ec in es.getEvaluationContext){
	      		if(ec.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Name" of "Evaluation Context" should be set to better distinguish between different evaluation contexts.'
  	}
  	
  	constraint evaluationModelFromEvaluationContextIsAssociated { //for each Evaluation Context a Evaluation Model must be associated
      guard : self.satisfies("evaluationContextIsDefined") and
              self.satisfies("evaluationModelIsDefined")
      
      check {
      	var ecName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (ec in es.getEvaluationContext){
	      		if(ec.getEvaluationModel.isDefined()){
	      			continue;
	      		}else
	      			ecName = ec.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Error: "Evaluation Model" of "Evaluation Context ' + ecName + '" must be associated to define the evaluation model related with the evaluation.'
  	}
  	
  	constraint contextModelFromEvaluationContextIsAssociated { //for each Evaluation Context a Context Model must be associated
      guard : self.satisfies("evaluationContextIsDefined")  and
              self.satisfies("contextModelIsDefined")
      
      check {
      	var ecName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (ec in es.getEvaluationContext){
	      		if(ec.getContextModel.isDefined()){
	      			continue;
	      		}else
	      			ecName = ec.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Error: "Context Model" of "Evaluation Context ' + ecName + '" must be associated to specify the context of use related with the evaluation.'
  	}
  	
  	critique contextEnvironmentFromEvaluationContextIsAssociated { //for each Evaluation Context a Context Environment should be associated
      guard : self.satisfies("evaluationContextIsDefined")  and
              self.satisfies("environmentIsDefined") 
      
      check {
      	var ecName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (ec in es.getEvaluationContext){
	      		if(ec.getContextEnvironment.size() >= 1){
	      			continue;
	      		}else
	      			ecName = ec.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Context Environment" of "Evaluation Context ' + ecName + '" should be associated to define the context environment related with the evaluation.'
  	}
  	
  	critique enviromentInstanceFromEvaluationContextIsDefined { //for each Evaluation Context an Enviroment Instance should be defined
      guard : self.satisfies("evaluationContextIsDefined") 
      
      check {
      	var ecName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (ec in es.getEvaluationContext){
	      		if(ec.getEnviromentInstance.size() >= 1){
	      			continue;
	      		}else
	      			ecName = ec.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Enviroment Instance" of "Evaluation Context ' + ecName + '" should be set to instantiate the environment variables (e.g. [OS]: Windows 7 from "CE Variables") related with the evaluation.'
  	}
  	
  	critique scenarioFromEvaluationContextIsAssociated { //for each Evaluation Context a Scenario should be associated
      guard : self.satisfies("evaluationContextIsDefined")  and
              self.satisfies("scenarioIsDefined") and 
              self.satisfies("workflowFromEvaluationContextIsAssociated")
      
      check {
      	var ecName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (ec in es.getEvaluationContext){
	      		if(ec.getScenario.size() >= 1){
	      			continue;
	      		}else
	      			ecName = ec.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Scenario" of "Evaluation Context ' + ecName + '" should be associated to define the scenarios related with the evaluation.'
  	}
  	
  	critique scenarioFromEvaluationContextIsAssociatedCheck { //for each Evaluation Context a Scenario should be associated
      guard : self.satisfies("scenarioFromEvaluationContextIsAssociated")  
      
      check {
      	var ecName : String;
      	var sName : String;
      	for(es in self.getEvaluationSpecification){
      		for (ec in es.getEvaluationContext){
      			for(cs in self.getContextSpecification){
	    			for(ws in cs.getWorkflowSpecification){
	    				for(w in ws.getWorkflow){
	    					for(s in ec.getScenario){
	    						if(w.getScenario.getName.includes(s.getName)){ //workflow include scenario
	    							if(ec.getWorkflow.getName.includes(w.getName)){ //workflow from ec includes workflow from scenario
	    								continue;
	    							}else
	    								ecName = ec.getName;
	    								sName = s.getName;
	    								return false;
	    						}else
	    							continue;
	      					}
	      				}
	      			}
	      		}
	      	}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Workflow" of "Evaluation Context ' + ecName + '" should contain "Scenario ' + sName + '" associated "Workflow".'
  	}
  	
  	critique usabilityGoalFromEvaluationContextIsAssociated { //for each Evaluation Context an Usability Goal should be associated
      guard : self.satisfies("evaluationContextIsDefined")  and
              self.satisfies("usabilityGoalIsDefined")
      
      check {
      	var ecName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (ec in es.getEvaluationContext){
	      		if(ec.getUsabilityGoal.size() >= 1){
	      			continue;
	      		}else
	      			ecName = ec.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Usability Goal" of "Evaluation Context ' + ecName + '" should be associated to define the usability goals related with the evaluation.'
  	}
  	
  	critique usabilityGoalFromEvaluationContextIsAssociatedCheck { //for each Evaluation Context an Usability Goal should be associated
      guard : self.satisfies("usabilityGoalFromEvaluationContextIsAssociated")  and
              self.satisfies("evaluationGoalIsDefined")
      
      check {
      	var ecName : String;
      	var egName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (eg in es.getEvaluationGoal){
	      		for(ug in eg.getUsabilityGoal){
	      			for(ec in es.getEvaluationContext){
	      				if(ec.getUsabilityGoal.getName.includes(ug.getName) and eg.getUsabilityGoal.size() == ec.getUsabilityGoal.size()){
	      					continue;
	      				}else
	      					ecName = ec.getName;
	      					egName = eg.getName;
	      					return false;
	      			}
	      		}
	      	}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Usability Goal" of "Evaluation Context ' + ecName + '" should contain all "Usability Goal" defined in "Evaluation Goal ' + egName + '".'
  	}
  	
  	critique userProfileSelectionFromEvaluationContextIsAssociated { //for each Evaluation Context an User Profile Selection should be associated
      guard : self.satisfies("evaluationContextIsDefined")  and
              self.satisfies("userProfileSpecificationIsDefined")
      
      check {
      	var ecName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (ec in es.getEvaluationContext){
	      		if(ec.getUserProfileSelection.size() >= 1){
	      			continue;
	      		}else
	      			ecName = ec.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "User Profile Selection" of "Evaluation Context ' + ecName + '" should be associated to specify the user profiles related with the evaluation.'
  	}
  	
  	critique userProfileSelectionFromEvaluationContextIsAssociatedCheck { //for each Evaluation Context an User Profile Selection should be associated
      guard : self.satisfies("userProfileSelectionFromEvaluationContextIsAssociated")  and
              self.satisfies("userProfileFromParticipantIsAssociated")
              
      check {
      	var ecName : String;
      	var pName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (p in es.getParticipant){
	      		for(up in p.getUserProfile){
	      			for(ec in es.getEvaluationContext){ 
	      				if(ec.getUserProfileSelection.getName.includes(up.getName) and p.getUserProfile.size() == ec.getUserProfileSelection.size()){
	      					continue;
	      				}else
	      					ecName = ec.getName;
	      					pName = p.getName;
	      					return false;
	      			}	
	      		}
	      	}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "User Profile Selection" of "Evaluation Context ' + ecName + '" should contain all "User Profile" defined in "Participant ' + pName + '".'
  	}
  	
  	critique workflowFromEvaluationContextIsAssociated { //for each Evaluation Context a Workflow should be associated
      guard : self.satisfies("evaluationContextIsDefined")  and
              self.satisfies("workflowIsDefined")
      
      check {
      	var ecName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (ec in es.getEvaluationContext){
	      		if(ec.getWorkflow.size() >= 1){
	      			continue;
	      		}else
	      			ecName = ec.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Workflow" of "Evaluation Context ' + ecName + '" should be associated to define the workflows related with the evaluation.'
  	}
  	
  	constraint documentationIsDefined { //for each Evaluation Specification a Documentation must be defined
      guard : self.satisfies("evaluationModelFromEvaluationContextIsAssociated") and
              self.satisfies("contextModelFromEvaluationContextIsAssociated")
      
      check {
      	var esName : String;
      	for(es in self.getEvaluationSpecification){
      		if(es.getDocumentaton.size() >= 1){
      			continue;
      		}else
				esName = es.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Evaluation Error: Create Child "Documentation" in Parent "Evaluation Specification ' + esName + '" to define teaching materials for the DSL (e.g. videos, guided examples, videos).'
  	}
  	
  	critique nameFromDocumentationIsDefined { //for each Documentation a Name must be defined
      guard : self.satisfies("documentationIsDefined") 
      
      check {
      	for(es in self.getEvaluationSpecification){
	    	for (d in es.getDocumentaton){
	      		if(d.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	     }
	     return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Name" of "Documentation" should be set to better distinguish between different documents.'
  	}
  	
  	constraint evaluationModelFromDocumentationIsAssociated { //for each Documentation an Evaluation Model must be associated
      guard : self.satisfies("documentationIsDefined") and
              self.satisfies("evaluationModelIsDefined")
      
      check {
      	var dName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (d in es.getDocumentaton){
	      		if(d.getEvaluationModel.isDefined()){
	      			continue;
	      		}else
	      			dName = d.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Error: "Evaluation Model" of "Documentation ' + dName + '" must be associated to define for which evaluation the documents apply to.'
  	}
  	
  	critique outsideRefFromDocumentationIsAssociated { //for each Documentation an OutsideRef should be associated
      guard : self.satisfies("documentationIsDefined") and
              self.satisfies("outsideRefIsDefined") 
      
      check {
      	var dName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (d in es.getDocumentaton){
	      		if(d.getOutsideRef.isDefined()){
	      			continue;
	      		}else
	      			dName = d.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Outside Ref" of "Documentation ' + dName + '" should be associated to define outside references.'
  	}
  	
  	critique scenarioFromDocumentationIsAssociated { //for each Documentation a Scenario must be associated
      guard : self.satisfies("documentationIsDefined") and
              self.satisfies("scenarioIsDefined")
      
      check {
      	var dName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (d in es.getDocumentaton){
	      		if(d.getScenario.size() >= 1){
	      			continue;
	      		}else
	      			dName = d.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Scenario" of "Documentation ' + dName + '" should be associated to define which scenarios are covered by the documentation.'
  	}
  	
  	critique scenarioFromDocumentationIsAssociatedCheck { //for each Documentation a Scenario must be associated
      guard : self.satisfies("scenarioFromDocumentationIsAssociated") 
      
      check {
      	var dName : String;
      	for(es in self.getEvaluationSpecification){
      		for(d in es.getDocumentaton){
      			for(ec in es.getEvaluationContext){
	    			for(s in ec.getScenario){
	    				if(d.getScenario.getName.includes(s.getName)){
	    					continue;
	    				}else
	    					dName = d.getName;
	    					return false;
	    			}
	    		}
      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Scenario" of "Documentation ' + dName + '" should contain all "Scenario" associated in "Evalaution Context".'
  	}
  	
  	constraint processIsDefined { //for each Evaluation Specification a Process must be defined
      guard : self.satisfies("documentationIsDefined")
      check {
      	var esName : String;
      	for(es in self.getEvaluationSpecification){
      		if(es.getProcess.size() >= 1){
      			continue;
      		}else
				esName = es.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Evaluation Error: Create Child "Process" in Parent "Evaluation Specification ' + esName + '" to define the concrete design for the evaluation by modelling the activities that should be performed.'
  	}
  	
  	critique nameFromProcessIsDefined { //for each Process a Name must be defined
      guard : self.satisfies("processIsDefined") 
      
      check {
      	for(es in self.getEvaluationSpecification){
	    	for (p in es.getProcess){
	      		if(p.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Name" of "Process" should be set to better distinguish between different processes.'
  	}
  	
  	constraint evaluationModelFromProcessIsAssociated { //for each Process a Evaluation Model must be associated
      guard : self.satisfies("processIsDefined") and
              self.satisfies("evaluationModelIsDefined")
      
      check {
        var pName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (p in es.getProcess){
	      		if(p.getEvaluationModel.isDefined()){
	      			continue;
	      		}else
	      		    pName = p.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Error: "Evaluation Model" of "Process ' + pName + '" must be associated to specify the learning activities that are modelled in the evaluation process.'
  	}
  	
  	critique processModelFromProcessIsAssociated { //for each Process a Process Model should be associated
      guard : self.satisfies("processIsDefined") and
              self.satisfies("processModelIsDefined")
      
      check {
        var pName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (p in es.getProcess){
	      		if(p.getProcessModel.isDefined()){
	      			continue;
	      		}else
	      		    pName = p.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Evaluation Suggestion: "Process Model" of "Process ' + pName + '" should be associated to related process model.'
  	}
  	
  	/*constraint testModelIsDefined { //for each Evaluation Specification a Test Model must be defined
      guard : self.satisfies("evaluationContextIsDefined")
      check {
      	var esName : String;
      	for(es in self.getEvaluationSpecification){
      		if(es.getTestModel.size() >= 1){
      			continue;
      		}else
				esName = es.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Error: Create Element "Test Model" in Element "Evaluation Specification ' + esName + '" .'
  	}
  	
  	critique nameFromTestModelIsDefined { //for each Test Model a Name must be defined
      guard : self.satisfies("testModelIsDefined") 
      
      check {
      	for(es in self.getEvaluationSpecification){
	    	for (tm in es.getTestModel){
	      		if(tm.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	     }
	     return true;	
      }
      message : 'USE-ME Suggestion: Property "Name" of Element "Test Model" should be set.'
  	}
  	
  	constraint evaluationModelFromTestModelIsAssociated { //for each Test Model an Evaluation Model must be associated
      guard : self.satisfies("testModelIsDefined") and
      		  self.satisfies("evaluationModelIsDefined")
      
      check {
        var tmName : String;
      	for(es in self.getEvaluationSpecification){
	    	for (tm in es.getTestModel){
	      		if(tm.getEvaluationModel.size() >= 1){
	      			continue;
	      		}else
	      			tmName = tm.getName;
	      			return false;
	      		}
	     }
	     return true;	
      }
      message : 'USE-ME Error: Property "Evaluation Model" of Element "Test Model ' + tmName + '" should be set.'
  	}*/
  	
}

context UseMeSpecification{ //PACKAGE INTERACTION SPECIFICATION

  	constraint interactionModelIsDefined { //for each Interaction Specification an Interaction Model must be defined
      guard : self.satisfies("interactionSpecificationIsDefined")
      
      check {
      	var isName : String;
      	for(is in self.getInteractionSpecification){
      		if(is.getInteractionModel.size() >= 1){
      			continue;
      		}else
				isName = is.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Interaction Error: Create Child "Interaction Model" in Parent "Interaction Specification ' + isName + '" to support the capture of predefined events and to provide statistics about the occurrences.'
  	}
  	
  	critique nameFromInteractionModelIsDefined { //for each Interaction Model a Name must be defined
      guard : self.satisfies("interactionModelIsDefined") 
      
      check {
      	for(is in self.getInteractionSpecification){
	    	for (im in is.getInteractionModel){
	      		if(im.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Interaction Suggestion: "Name" of "Interaction Model" should be set to better distinguish between different interaction models.'
  	}
  	
  	constraint evaluationModelFromInteractionModelIsAssociated { //for each Interaction Model an Evaluation Model must be associated
      guard : self.satisfies("evaluationModelIsDefined") and
              self.satisfies("interactionModelIsDefined") 
      
      check {
      	var imName : String;
      	for(is in self.getInteractionSpecification){
	    	for (im in is.getInteractionModel){
	      		if(im.getEvaluationModel.size() >= 1){
	      			continue;
	      		}else
	      			imName = im.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Interaction Error: "Evaluation Model" of "Interaction Model ' + imName + '" must be associated to specify the evaluation model to which the interaction model applies to.'
  	}
  	
  	critique participantFromInteractionModelIsAssociated { //for each Interaction Model a Participant should be associated
      guard : self.satisfies("participantIsDefined") and
              self.satisfies("interactionModelIsDefined")
      
      check {
      	var imName : String;
      	for(is in self.getInteractionSpecification){
	    	for (im in is.getInteractionModel){
	      		if(im.getParticipant.size() >= 1){
	      			continue;
	      		}else
	      			imName = im.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Interaction Suggestion: "Participant" of "Interaction Model ' + imName + '" should be associated to define which user profiles will perform in the interaction.'
  	}
  	
  	constraint interactionSyntaxIsDefined { //for each Interaction Specification an Interaction Syntax must be defined
      guard : self.satisfies("taskIsDefined") and 
              self.satisfies("scenarioFromTaskIsAssociated")
      
      check {
      	var isName : String;
      	for(is in self.getInteractionSpecification){
      		if(is.getInteractionSyntax.size() >= 1){
      			continue;
      		}else
				isName = is.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Interaction Error: Create Child "Interaction Syntax" in Parent "Interaction Specification ' + isName + '" to reflect the interaction elements from the version of the language.'
  	}
  	
  	critique interactionSyntaxIsDefinedCheck { //for each Interaction Specification an Interaction Syntax must be defined
      guard : self.satisfies("interactionSyntaxIsDefined")
      
      check {
      	var isName : String;
      	var esName : String;
      	for(is in self.getInteractionSpecification){
      		for(es in self.getEvaluationSpecification){
      			if(is.getInteractionSyntax.size() == es.getLanguage.size()){
      				continue;
      			}else
      				isName = is.getName;
      				esName = es.getName;
      				return false;
      		}
      	}
      	return true;	
      }
      message : 'USE-ME Interaction Suggestion: Create Child "Interaction Syntax" in Parent "Interaction Specification ' + isName + '" for each "Language" specified in "Evaluation Specification ' + esName + '".'
  	}
  	
  	critique nameFromInteractionSyntaxIsDefined { //for each Interaction Syntax a Name must be defined
      guard : self.satisfies("interactionSyntaxIsDefined") 
      
      check {
      	for(is in self.getInteractionSpecification){
	    	for (i in is.getInteractionSyntax){
	      		if(i.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Interaction Suggestion: "Name" of "Interaction Syntax" should be set to better distinguish between different interaction syntaxes.'
  	}
  	
  	constraint interactionModelFromInteractionSyntaxIsAssociated { //for each Interaction Syntax an Interaction Model must be associated
      guard : self.satisfies("interactionSyntaxIsDefined") and  
              self.satisfies("interactionModelIsDefined")
      
      check {
      	var iName : String;
      	for(is in self.getInteractionSpecification){
	    	for (i in is.getInteractionSyntax){
	      		if(i.getInteractionModel.size() >= 1){
	      			continue;
	      		}else
	      			iName = i.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Interaction Error: "Interaction Model" of "Interaction Syntax ' + iName + '" must be associated to specify to which interaction model the interaction syntax applies to.'
  	}
  	
  	constraint concreteSyntaxAndOrAbstractSyntaxFromInteractionSyntaxIsAssociated { //for each Interaction Syntax a Concrete Syntax and/or Abstract Syntax must be associated
      guard : self.satisfies("interactionSyntaxIsDefined") and  
              (self.satisfies("concreteSyntaxFromDSLIsDefined") or
              self.satisfies("abstractSyntaxFromDSLIsDefined"))
      
      check {
      	var iName : String;
      	for(is in self.getInteractionSpecification){
	    	for (i in is.getInteractionSyntax){
	      		if(i.getConcreteSyntax.size() >= 1 or i.getAbstractSyntax.size() >= 1){
	      			continue;
	      		}else
	      			iName = i.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Interaction Error: "Concrete Syntax" and/or "Abstract Syntax" of "Interaction Syntax ' + iName + '" should be associated.'
  	}
  	
  	critique concreteSyntaxFromInteractionSyntaxIsAssociated { //for each Interaction Syntax a Concrete Syntax should be associated
      guard : self.satisfies("concreteSyntaxAndOrAbstractSyntaxFromInteractionSyntaxIsAssociated") and
              self.satisfies("interactionModelFromInteractionSyntaxIsAssociated")
      
      check {
      	var iName : String;
      	for(is in self.getInteractionSpecification){
	    	for (i in is.getInteractionSyntax){
	      		if(i.getConcreteSyntax.size() >= 1){
	      			continue;
	      		}else
	      			iName = i.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Interaction Suggestion: "Concrete Syntax" of "Interaction Syntax ' + iName + '" should be associated to define the concrete syntax.'
  	}
  	
  	critique abstractSyntaxFromInteractionSyntaxIsAssociated { //for each Interaction Syntax a Abstract Syntax should be associated
      guard : self.satisfies("concreteSyntaxAndOrAbstractSyntaxFromInteractionSyntaxIsAssociated") and
              self.satisfies("interactionModelFromInteractionSyntaxIsAssociated")
      
      check {
      	var iName : String;
      	for(is in self.getInteractionSpecification){
	    	for (i in is.getInteractionSyntax){
	      		if(i.getAbstractSyntax.size() >= 1){
	      			continue;
	      		}else
	      			iName = i.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Interaction Suggestion: "Abstract Syntax" of "Interaction Syntax ' + iName + '" should be associated to define the abstract syntax.'
  	}
  	
  	critique documentationFromInteractionSyntaxIsAssociated { //for each Interaction Syntax a Documentation should be associated
      guard : self.satisfies("concreteSyntaxAndOrAbstractSyntaxFromInteractionSyntaxIsAssociated") and
              self.satisfies("interactionModelFromInteractionSyntaxIsAssociated") and
              (self.satisfies("documentationIsDefined") or
      		  self.satisfies("docIsDefined"))
      
      check {
      	var iName : String;
      	for(is in self.getInteractionSpecification){
	    	for (i in is.getInteractionSyntax){
	      		if(i.getDocumentation.size() >= 1){
	      			continue;
	      		}else
	      			iName = i.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Interaction Suggestion: "Documentation" of "Interaction Syntax ' + iName + '" should be associated.'
  	}
  	
  	critique outsideRefFromInteractionSyntaxIsAssociated { //for each Interaction Syntax an Outside Ref should be associated
      guard : self.satisfies("concreteSyntaxAndOrAbstractSyntaxFromInteractionSyntaxIsAssociated") and
              self.satisfies("interactionModelFromInteractionSyntaxIsAssociated") and
      		  self.satisfies("outsideRefIsDefined")
      
      check {
      	var iName : String;
      	for(is in self.getInteractionSpecification){
	    	for (i in is.getInteractionSyntax){
	      		if(i.getOutsideRef.isDefined()){
	      			continue;
	      		}else
	      			iName = i.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Interaction Suggestion: "Outside Ref" of "Interaction Syntax ' + iName + '" should be associated to an outside reference.'
  	}
  	
  	constraint taskIsDefined { //for each Interaction Specification a Task must be defined
      guard : self.satisfies("interactionModelIsDefined") and 
      		  self.satisfies("evaluationModelFromInteractionModelIsAssociated")
      
      check {
      	var isName : String;
      	for(is in self.getInteractionSpecification){
      		if(is.getTask.size() >= 1){
      			continue;
      		}else
				isName = is.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Interaction Error: Create Child "Task" in Parent "Interaction Specification ' + isName + '" to represent a concrete task for which the interaction will be analysed.'
  	}
  	
  	critique nameFromTaskIsDefined { //for each Task a Name must be defined
      guard : self.satisfies("taskIsDefined") 
      
      check {
      	for(is in self.getInteractionSpecification){
	    	for (t in is.getTask){
	      		if(t.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Interaction Suggestion: "Name" of "Task" should be set to better distinguish between different tasks.'
  	}
  	
  	constraint scenarioFromTaskIsAssociated { //for each Task a Scenario must be associated
      guard : self.satisfies("taskIsDefined") and 
      		  self.satisfies("scenarioIsDefined")
      
      check {
      	var tName : String;
      	for(is in self.getInteractionSpecification){
	    	for (t in is.getTask){
	      		if(t.getScenario.size() >= 1){
	      			continue;
	      		}else
	      			tName = t.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Interaction Error: "Scenario" of "Task ' + tName + '" must be associated to specify which scenarios the task covers.'
  	}
  	
  	critique interactionModelFromTaskIsAssociated { //for each Task an Interaction Model should be associated
      guard : self.satisfies("taskIsDefined") and 
      		  self.satisfies("interactionModelIsDefined")
      
      check {
      	var tName : String;
      	for(is in self.getInteractionSpecification){
	    	for (t in is.getTask){
	      		if(t.getInteractionModel.size() >= 1){
	      			continue;
	      		}else
	      			tName = t.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Interaction Suggestion: "Interaction Model" of "Task ' + tName + '" should be associated to specify the interaction model the task applies to.'
  	}
  	
  	critique documentationFromTaskIsAssociated { //for each Task a Documentation should be associated
      guard : self.satisfies("taskIsDefined") and 
      		  (self.satisfies("documentationIsDefined") or
      		  self.satisfies("docIsDefined"))
      
      check {
      	var tName : String;
      	for(is in self.getInteractionSpecification){
	    	for (t in is.getTask){
	      		if(t.getDocumentation.size() >= 1){
	      			continue;
	      		}else
	      			tName = t.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Interaction Suggestion: "Documentation" of "Task ' + tName + '" should be associated to specify the interaction model documentation.'
  	}
  	
  	constraint eventIsDefined { //for each Interaction Specification an Event must be defined
      guard : self.satisfies("interactionSyntaxIsDefined") and
      		  self.satisfies("interactionModelFromInteractionSyntaxIsAssociated") 
      
      check {
      	var isName : String;
      	for(is in self.getInteractionSpecification){
      		if(is.getEvent.size() >= 1){
      			continue;
      		}else
				isName = is.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Interaction Error: Create Child "Event" in Parent "Interaction Specification ' + isName + '" to represent the type of data that will be captured from different interaction devices.'
  	}
  	
  	critique nameFromEventIsDefined { //for each Event a Name must be defined
      guard : self.satisfies("eventIsDefined") 
      
      check {
      	for(is in self.getInteractionSpecification){
	    	for (e in is.getEvent){
	      		if(e.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Interaction Suggestion: "Name" of "Event" should be set to better distinguish between different events.'
  	}
  	
  	constraint interactionModelFromEventIsAssociated { //for each Event an Interaction Model must be associated
      guard : self.satisfies("eventIsDefined") and 
              self.satisfies("interactionModelIsDefined")
      
      check {
        var eName : String;
      	for(is in self.getInteractionSpecification){
	    	for (e in is.getEvent){
	      		if(e.getInteractionModel.size() >= 1){
	      			continue;
	      		}else
	      			eName = e.getName();
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Interaction Error: "Interaction Model" of "Event ' + eName + '" should be associated to specify to which interaction model the event applies to.'
  	}
  	
  	critique analysisTypeFromEventIsDefined { //for each Event an Analysis Type should be defined
      guard : self.satisfies("eventIsDefined")
      
      check {
        var eName : String;
      	for(is in self.getInteractionSpecification){
	    	for (e in is.getEvent){
	      		if(e.getAnalysisType.isDefined()){
	      			continue;
	      		}else
	      			eName = e.getName();
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Interaction Suggestion: "Analysis Type" of "Event ' + eName + '" should be set to describe how the event is going to be analysed (e.g observation, time observation, sucess/fail).'
  	}
  	
  	critique manualFromEventIsDefined { //for each Event an Analysis Type should be defined
      guard : self.satisfies("eventIsDefined") and 
      		  not(self.satisfies("captureActionIsDefined"))
      
      check {
        var eName : String;
      	for(is in self.getInteractionSpecification){
	    	for (e in is.getEvent){
	      		if(e.isManual){
	      			continue;
	      		}else
	      			eName = e.getName();
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Interaction Suggestion: Change "Manual" of "Event ' + eName + '" to true if the event is manual.'
  	}
  	
  	critique captureFromEventIsDefined { //for each Event a Capture should be defined
      guard : self.satisfies("eventIsDefined")
      
      check {
        var eName : String;
      	for(is in self.getInteractionSpecification){
	    	for (e in is.getEvent){
	      		if(e.getCapture.size() >= 1){
	      			continue;
	      		}else
	      			eName = e.getName();
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Interaction Suggestion: "Capture" of "Event ' + eName + '" should be set to describe how the event is going to be captured.'
  	}
  	
  	critique recordEventFromEventIsDefined { //for each Event a Record Event should be defined
      guard : self.satisfies("eventIsDefined")
      
      check {
        var eName : String;
      	for(is in self.getInteractionSpecification){
	    	for (e in is.getEvent){
	      		if(e.getRecordEvent.size() >= 1){
	      			continue;
	      		}else
	      			eName = e.getName();
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Interaction Suggestion: "Record Event" of "Event ' + eName + '" should be set to define how the event is going to be recorded (e.g. screen record, live observation).'
  	}
  	
  	critique usabilityRequirementFromEventIsAssociated { //for each Event an Usability Requirement should be associated
      guard : self.satisfies("eventIsDefined") and
              self.satisfies("usabilityRequirementIsDefined")
      
      check {
        var eName : String;
      	for(is in self.getInteractionSpecification){
	    	for (e in is.getEvent){
	      		if(e.getUsabilityRequirement.size() >= 1){
	      			continue;
	      		}else
	      			eName = e.getName();
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Interaction Suggestion: "Usability Requirement" of "Event ' + eName + '" should be associated to specify to which usability requirements the event applies to.'
  	}
  	
  	critique captureActionIsDefined { //for each Event Capture>=1 a Capture Action should be defined
      guard : self.satisfies("eventIsDefined") and 
              self.satisfies("captureFromEventIsDefined")
      
      check {
      	var eName : String;
      	for(is in self.getInteractionSpecification){
	    	for (e in is.getEvent){
	    		if(e.getCapture.size() >= 1){ 
	    			if(e.getCaptureAction.size() >= e.getCapture.size()){
	    				continue;
	    			}else
	    				eName = e.getName;
	      				return false;
	    		}else
	    			continue;	
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Interaction Suggestion: Create Child "Capture Action" in Parent "Event ' + eName + '" for each "Capture" defined in "Event".'
  	}
  	
  	critique nameFromCaptureActionIsDefined { //for each Capture Action a Name must be defined
      guard : self.satisfies("captureActionIsDefined") 
      
      check {
      	for(is in self.getInteractionSpecification){
	    	for (e in is.getEvent){
	    		for(ca in e.getCaptureAction){
	    			if(ca.getName.isDefined()){
		      			continue;
		      		}else
		      			return false;
	    		}  		
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Interaction Suggestion: "Name" of "Capture Action" should be set to better distinguish between different capture actions.'
  	}
  	
  	constraint interactionResultIsDefined { //for each Interaction Specification an Interaction Result must be defined
      guard : self.satisfies("eventIsDefined")
      
      check {
      	var isName : String;
      	for(is in self.getInteractionSpecification){
      		if(is.getInteractionResult.size() >= 1){
      			continue;
      		}else
				isName = is.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Interaction Error: If the Evaluation was executed create Child "Interaction Result" in Parent "Interaction Specification ' + isName + '" to include statistical analysis and results of the executed interaction model.'
  	}
  	
  	critique nameFromInteractionResultIsDefined { //for each Interaction Result a Name must be defined
      guard : self.satisfies("interactionResultIsDefined") 
      
      check {
      	for(is in self.getInteractionSpecification){
	    	for (ir in is.getInteractionResult){
	      		if(ir.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Interaction Suggestion: "Name" of "Interaction Result" should be set to better distinguish between different interaction results.'
  	}
  	
  	constraint eventFromInteractionResultIsAssociated { //for each Interaction Result an Event must be associated
      guard : self.satisfies("interactionResultIsDefined") and
      		  self.satisfies("eventIsDefined")
      
      check {
      	var irName : String;
      	for(is in self.getInteractionSpecification){
	    	for (ir in is.getInteractionResult){
	      		if(ir.getEvent.size() >= 1){
	      			continue;
	      		}else
	      			irName = ir.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Interaction Error: "Event" of "Interaction Result ' + irName + '" must be associated to describe the event performed.'
  	}
  	
  	constraint interactionModelFromInteractionResultIsAssociated { //for each Interaction Result an Interaction Model must be associated
      guard : self.satisfies("interactionResultIsDefined") and
      		  self.satisfies("interactionModelIsDefined")
      
      check {
      	var irName : String;
      	for(is in self.getInteractionSpecification){
	    	for (ir in is.getInteractionResult){
	      		if(ir.getInteractionModel.isDefined()){
	      			continue;
	      		}else
	      			irName = ir.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Interaction Error: "Interaction Model" of "Interaction Result ' + irName + '" must be associated to specify to which interaction model the interaction result applies to.'
  	} 	
  	
  	critique outsifeReferenceFromInteractionResultIsAssociated { //for each Interaction Result an Outsife Reference must be associated
      guard : self.satisfies("interactionResultIsDefined") and
      		  self.satisfies("outsideRefIsDefined") 
      
      check {
      	var irName : String;
      	for(is in self.getInteractionSpecification){
	    	for (ir in is.getInteractionResult){
	      		if(ir.getOutsifeReference.size() >= 1){
	      			continue;
	      		}else
	      			irName = ir.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Interaction Suggestion: "Outside Reference" of "Interaction Result ' + irName + '" should be set to specify outside references (e.g. google forms).'
  	}
  	
  	critique resultValueIsDefined { //for each Interaction Result a Result Value must be defined
      guard : self.satisfies("interactionResultIsDefined") and 
              self.satisfies("eventFromInteractionResultIsAssociated") 
      
      check {
      	var irName : String;
      	for(is in self.getInteractionSpecification){
	    	for (ir in is.getInteractionResult){
	    		for(e in ir.getEvent){
	    			if(e.getCaptureAction.size() >= 1 and ir.getResultValue.size() == 0){
	    				irName = ir.getName;
	    				return false;
	    			}else
	    				continue;
	    		}
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Interaction Suggestion: Create Child "Result Value" in Parent "Interaction Result ' + irName + '" to define the results obtained.'
  	}
  	
  	critique resultValueIsDefinedCheck { //for each Interaction Result a Result Value must be defined
      guard : self.satisfies("resultValueIsDefined") 
      
      check {
      	var irName : String;
      	var sum : Integer = 0;
      	for(is in self.getInteractionSpecification){
	    	for (ir in is.getInteractionResult){
	    		for(e in ir.getEvent){
	    			sum = sum + e.getCaptureAction.size();
	    		}
	    		if(ir.getResultValue.size() == sum){
	    			continue;
	    		}else
	    			return false;
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Interaction Suggestion: Create Child "Result Value" in Parent "Interaction Result ' + irName + '" for each "Capture Action" defined.'
  	}
  	
  	critique nameFromResultValueIsDefined { //for each Result Value a Name should be defined
      guard : self.satisfies("resultValueIsDefined") 
      
      check {
      	for(is in self.getInteractionSpecification){
	    	for (ir in is.getInteractionResult){
	    		for(rv in ir.getResultValue){
	    			if(rv.getName.isDefined()){
	      				continue;
	      			}else
	      				return false;
	    		}
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Interaction Suggestion: "Name" of "Result Value" should be set to better distinguish between different result values.'
  	}
  	
  	critique associatedRequirementFromResultValueIsAssociated { //for each Result Value an Associated Requirement should be associated
      guard : self.satisfies("resultValueIsDefined") and
              (self.satisfies("requirementIsDefined") or
              self.satisfies("usabilityRequirementIsDefined"))
      
      check {
      	var rvName : String;
      	for(is in self.getInteractionSpecification){
	    	for (ir in is.getInteractionResult){
	    		for(rv in ir.getResultValue){
	    			if(rv.getAssociatedRequirement.size() >= 1){
	      				continue;
	      			}else
	      				rvName = rv.getName;
	      				return false;
	    		}
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Interaction Suggestion: "Associated Requirement" of "Result Value ' + rvName + '" should be associated to a specific requirement.'
  	}
  	
  	constraint languageFromResultValueIsAssociated { //for each Result Value a Language should be associated
      guard : self.satisfies("resultValueIsDefined") and 
              self.satisfies("languageIsDefined") 
      
      check {
      	var rvName : String;
      	for(is in self.getInteractionSpecification){
	    	for (ir in is.getInteractionResult){
	    		for(rv in ir.getResultValue){
	    			if(rv.getLanguage.isDefined()){
	      				continue;
	      			}else
	      				rvName = rv.getName;
	      				return false;
	    		}
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Interaction Error: "Language" of "Result Value ' + rvName + '" must be associated to a language under evaluation.'
  	}
  	
  	critique relatedActionFromResultValueIsAssociated { //for each Result Value a Related Action should be associated
      guard : self.satisfies("resultValueIsDefined") and 
              self.satisfies("captureActionIsDefined") 
      
      check {
      	var rvName : String;
      	for(is in self.getInteractionSpecification){
	    	for (ir in is.getInteractionResult){
	    		for(rv in ir.getResultValue){
	    			if(rv.getRelatedAction.size() >= 1){
	      				continue;
	      			}else
	      				rvName = rv.getName;
	      				return false;
	    		}
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Interaction Suggestion: "Related Action" of "Result Value ' + rvName + '" should be associated to a capture action involved.'
  	}
  	
  	constraint resultValueFromResultValueIsDefined { //for each Result Value a Result Value should be defined
      guard : self.satisfies("resultValueIsDefined") 
      
      check {
      	var rvName : String;
      	for(is in self.getInteractionSpecification){
	    	for (ir in is.getInteractionResult){
	    		for(rv in ir.getResultValue){
	    			if(rv.getResultValue.isDefined()){
	      				continue;
	      			}else
	      				rvName = rv.getName;
	      				return false;
	    		}
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Interaction Error: "Result Value" of "Result Value ' + rvName + '" must be set.'
  	}
  	 
}

context UseMeSpecification{ //PACKAGE SURVEY SPECIFICATION
  	
  	constraint surveyModelIsDefined { //for each Survey Specification a Survey Model must be defined
      guard : self.satisfies("surveySpecificationIsDefined")
      
      check {
      	var ssName : String;
      	for(ss in self.getSurveySpecification){
      		if(ss.getSurveyModel.size() >= 1){
      			continue;
      		}else
				ssName = ss.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Survey Error: Create Child "Survey Model" in Parent "Survey Specification ' + ssName + '" to collect information to measure usability.'
  	}
  	
  	critique nameFromSurveyModelIsDefined { //for each Survey Model a Name must be defined
      guard : self.satisfies("surveyModelIsDefined") 
      
      check {
      	for(ss in self.getSurveySpecification){
	    	for (sm in ss.getSurveyModel){
	      		if(sm.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Survey Suggestion: "Name" of "Survey Model" should be set to better distinguish between different survey models.'
  	}
  	
  	constraint evaluationModelFromSurveyModelIsAssociated { //for each Survey Model an Evaluation Model must be associated
      guard : self.satisfies("surveyModelIsDefined") and
      		  self.satisfies("evaluationModelIsDefined")	
      
      check {
      	var smName : String;
      	for(ss in self.getSurveySpecification){
	    	for (sm in ss.getSurveyModel){
	      		if(sm.getEvaluationModel.size() >= 1){
	      			continue;
	      		}else
	      			smName = sm.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Survey Error: "Evaluation Model" of "Survey Model ' + smName + '" must be associated to specify to which evaluation model the survey model applies to.'
  	}
  	
  	critique participantFromSurveyModelIsAssociated { //for each Survey Model a Participant should be associated
      guard : self.satisfies("surveyModelIsDefined") and
      		  self.satisfies("participantIsDefined")	
      
      check {
      	var smName : String;
      	for(ss in self.getSurveySpecification){
	    	for (sm in ss.getSurveyModel){
	      		if(sm.getParticipant.size() >= 1){
	      			continue;
	      		}else
	      			smName = sm.getName;
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Survey Suggestion: "Participant" of "Survey Model ' + smName + '" should be associated to define the participants involved in the survey.'
  	}

  	constraint questionnaireIsDefined { //for each Survey Specification a Questionnaire must be defined
      guard : self.satisfies("surveyModelIsDefined") and
      		  self.satisfies("evaluationModelFromSurveyModelIsAssociated") 
      
      check {
      	var ssName : String;
      	for(ss in self.getSurveySpecification){
      		if(ss.getQuestionnaire.size() >= 1){
      			continue;
      		}else
				ssName = ss.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Survey Error: Create Child "Questionnaire" in Parent "Survey Specification ' + ssName + '" to define a set of questions.'
  	}
  	
  	critique nameFromQuestionnaireIsDefined { //for each Questionnaire a Name must be defined
      guard : self.satisfies("questionnaireIsDefined") 
      
      check {
      	for(ss in self.getSurveySpecification){
	    	for (q in ss.getQuestionnaire){
	      		if(q.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Survey Suggestion: "Name" of "Questionnaire" should be set to better distinguish between different questionnaires.'
  	}
  	
  	constraint surveyModelFromQuestionnaireIsAssociated { //for each Questionnaire a Survey Model must be associated
      guard : self.satisfies("questionnaireIsDefined") and
              self.satisfies("surveyModelIsDefined")
      
      check {
      	var qName : String;
      	for(ss in self.getSurveySpecification){
	    	for (q in ss.getQuestionnaire){
	      		if(q.getSurveyModel.size() >= 1){
	      			continue;
	      		}else
	      			qName = q.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Survey Error: "Survey Model" of "Questionnaire ' + qName + '" must be associated to specify to which survey model the questionnaire applies to.'
  	}
  	
  	critique usabilityRequirementFromQuestionnaireIsAssociated { //for each Questionnaire a Usability Requirement should be associated
      guard : self.satisfies("questionnaireIsDefined") and
              self.satisfies("usabilityRequirementIsDefined") and
              ((self.satisfies("questionnaireFromBackgroundQsIsAssociated")) or
      		  (self.satisfies("questionnaireFromFeedbackQsIsAssociated")))
      
      check {
      	var qName : String;
      	for(ss in self.getSurveySpecification){
	    	for (q in ss.getQuestionnaire){
	    		for(question in q.getQuestion){
	    			if(question.isTypeOf(FeedbackQs)){
	    				if(q.getUsabilityRequirement.size() >= 1){
	    					continue;
	    				}else
	    					qName = q.getName;
	      					return false;
	    			}else
	    				continue;
	    		}
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Survey Suggestion: "Usability Requirement" of "Questionnaire ' + qName + '" should be associated to specify which usability requirements are addressed in the questionnaire.'
  	}

  	constraint surveyResultIsDefined { //for each Survey Specification a Survey Result must be defined
      guard : self.satisfies("surveyModelIsDefined") and 
      		  self.satisfies("questionnaireIsDefined")
      
      check {
      	var ssName : String;
      	for(ss in self.getSurveySpecification){
      		if(ss.getSurveyResult.size() >= 1){
      			continue;
      		}else
				ssName = ss.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Survey Error: If the Evaluation was executed create Child "Survey Result" in Parent "Survey Specification ' + ssName + '" to include the statistical analysis and results.'
  	}
  	
  	critique nameFromSurveyResultIsDefined { //for each Survey Result a Name must be defined
      guard : self.satisfies("surveyResultIsDefined") 
      
      check {
      	for(ss in self.getSurveySpecification){
	    	for (sr in ss.getSurveyResult){
	      		if(sr.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Survey Suggestion: "Name" of "Survey Result" should be set to better distinguish between different survey results.'
  	}
  	
  	constraint questionnaireFromSurveyResultIsAssociated { //for each Survey Result a Questionnaire must be associated
      guard : self.satisfies("surveyResultIsDefined") and 
              self.satisfies("questionnaireIsDefined")
      
      check {
      	var srName : String;
      	for(ss in self.getSurveySpecification){
	    	for (sr in ss.getSurveyResult){
	      		if(sr.getQuestionnaire.size() >= 1){
	      			continue;
	      		}else
	      			srName = sr.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Survey Error: "Questionnaire" of "Survey Result ' + srName + '" must be associated to a specific questionnaire.'
  	}
  	
  	constraint surveyModelFromSurveyResultIsAssociated { //for each Survey Result a Survey Model must be associated
      guard : self.satisfies("surveyResultIsDefined") and
      		  self.satisfies("surveyModelIsDefined")
      
      check {
      	var srName : String;
      	for(ss in self.getSurveySpecification){
	    	for (sr in ss.getSurveyResult){
	      		if(sr.getSurveyModel.isDefined()){
	      			continue;
	      		}else
	      			srName = sr.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Survey Error: "Survey Model" of "Survey Result ' + srName + '" must be associated to a specific survey model.'
  	}
  	
  	critique outsideRefFromSurveyResultIsAssociated { //for each Survey Result an Outside Ref should be associated
      guard : self.satisfies("surveyResultIsDefined") and
      		  self.satisfies("outsideRefIsDefined") 
      
      check {
      	var srName : String;
      	for(ss in self.getSurveySpecification){
	    	for (sr in ss.getSurveyResult){
	      		if(sr.getOutsifeReference.size() >= 1){
	      			continue;
	      		}else
	      			srName = sr.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Survey Suggestion: "Outsife Reference" of "Survey Result ' + srName + '" should be associated to a specific outside reference (e.g. google forms).'
  	}
  	
  	critique resultValueSSIsDefined { //for each Survey Result a Result Value should be defined
      guard : self.satisfies("surveyResultIsDefined")
      
      check {
      	var srName : String;
      	for(ss in self.getSurveySpecification){
	    	for (sr in ss.getSurveyResult){
	      		if(sr.getResultValue.size() >= 1){
	      			continue;
	      		}else
	      			srName = sr.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Survey Suggestion: Create Child "Result Value" in Parent "Survey Result ' + srName + '" to define the results obtained on the questionnaire.'
  	}
  	
  	critique resultValueSSIsDefinedCheck { //for each Survey Result a Result Value should be defined
      guard : self.satisfies("resultValueSSIsDefined")
      
      check {
      	var srName : String;
      	for(ss in self.getSurveySpecification){
	    	for (sr in ss.getSurveyResult){
	      		if(sr.getResultValue.size() == ss.getQuestion.size()){
	      			continue;
	      		}else
	      			srName = sr.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Survey Suggestion: Create Child "Result Value" in Parent "Survey Result ' + srName + '" for each question "Background Qs" and "Feedback Qs" defined.'
  	}
  	
  	critique nameFromResultValueIsDefined { //for each Result Value a Name should be defined
      guard : self.satisfies("resultValueIsDefined")
      
      check {
      	for(ss in self.getSurveySpecification){
	    	for (sr in ss.getSurveyResult){
	    		for(rv in sr.getResultValue){
	    			if(rv.getName.isDefined()){
	      				continue;
	      			}else
	      				return false;
	    		}
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Survey Suggestion: "Name" of "Result Value" should be set to better distinguish between different result values.'
  	}
  	
  	critique associatedRequirementFromResultValueIsAssociated { //for each Result Value an Associated Requirement should be associated
      guard : self.satisfies("resultValueIsDefined") and
              self.satisfies("relatedQuestionFromResultValueIsAssociated") and
              (self.satisfies("requirementIsDefined") or
              self.satisfies("usabilityRequirementIsDefined")) 
      
      check {
      	var rvName : String;
      	for(ss in self.getSurveySpecification){
	    	for (sr in ss.getSurveyResult){
	    		for(rv in sr.getResultValue){
	      			for(rq in rv.getRelatedQuestion){
	      				if(rq.isTypeOf(FeedbackQs)){
	      					if(rv.getAssociatedRequirement.size() >= 1){
	      						continue;
	      					}else
	      						rvName = rv.getName;
	      						return false;
	      				}else
	      					continue;
	      			}
	    		}
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Survey Suggestion: "Associated Requirement" of "Result Value ' + rvName + '" should be associated to a specific requirement.'
  	}
  	
  	constraint languageFromResultValueIsAssociated { //for each Result Value an Language must be associated
      guard : self.satisfies("resultValueIsDefined") and
              self.satisfies("languageIsDefined")
      
      check {
      	var rvName : String;
      	for(ss in self.getSurveySpecification){
	    	for (sr in ss.getSurveyResult){
	    		for(rv in sr.getResultValue){
	    			if(rv.getLanguage.isDefined()){
	      				continue;
	      			}else
	      				rvName = rv.getName;
	      				return false;
	    		}
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Survey Error: "Language" of "Result Value ' + rvName + '" must be associated to a language under evaluation.'
  	}
  	
  	critique relatedActionFromResultValueIsAssociated { //for each Result Value a Related Action should be associated
      guard : self.satisfies("resultValueIsDefined") and
              self.satisfies("relatedQuestionFromResultValueIsAssociated") and
              self.satisfies("captureActionIsDefined") 
      
      check {
      	var rvName : String;
	   	for(ss in self.getSurveySpecification){
	    	for (sr in ss.getSurveyResult){
	    		for(rv in sr.getResultValue){
	      			for(rq in rv.getRelatedQuestion){
	      				if(rq.isTypeOf(FeedbackQs)){
	      					if(rv.getRelatedAction.size() >= 1){
	      						continue;
	      					}else
	      						rvName = rv.getName;
	      						return false;
	      				}else
	      					continue;
	      			}
	    		}
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Survey Suggestion: "Related Action" of "Result Value ' + rvName + '" should be associated to a capture action involved.'
  	}
  	
  	critique relatedQuestionFromResultValueIsAssociated { //for each Result Value a Related Question should be associated
      guard : self.satisfies("resultValueIsDefined") and
              self.satisfies("questionIsDefined") 
      
      check {
      	var rvName : String;
      	for(ss in self.getSurveySpecification){
	    	for (sr in ss.getSurveyResult){
	    		for(rv in sr.getResultValue){
	    			if(rv.getRelatedQuestion.size() >= 1){
	      				continue;
	      			}else
	      				rvName = rv.getName;
	      				return false;
	    		}
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Survey Suggestion: "Related Question" of "Result Value ' + rvName + '" should be associated to a question in the questionnaire.'
  	}
  	
  	constraint resultValueFromResultValueIsDefined { //for each Result Value a Result Value must be defined
      guard : self.satisfies("resultValueIsDefined")
      
      check {
      	var rvName : String;
      	for(ss in self.getSurveySpecification){
	    	for (sr in ss.getSurveyResult){
	    		for(rv in sr.getResultValue){
	    			if(rv.getResultValue.isDefined()){
	      				continue;
	      			}else
	      				rvName = rv.getName;
	      				return false;
	    		}
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Survey Error: "Result Value" of "Result Value ' + rvName + '" must be set.'
  	}
  	
  	critique questionIsDefined { //for each Survey Specification a Question should be defined
      guard : self.satisfies("questionnaireIsDefined") and 
      		  self.satisfies("surveyModelFromQuestionnaireIsAssociated")
      
      check {
      	var ssName : String;
      	for(ss in self.getSurveySpecification){
      		if(ss.getQuestion.size() >= 1){
      			continue;
      		}else
				ssName = ss.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Survey Suggestion: Create Child "Feedback Qs" to collect opinions about the DSL, and/or create Child "Background Qs" to collect information about the participant in Parent "Survey Specification ' + ssName + '".'
  	}
  	
  	critique nameFromBackgroundQsIsDefined { //for each BackgroundQs a Name should be defined
      guard : self.satisfies("questionIsDefined")
      
      check {
      	for(ss in self.getSurveySpecification){
      		for(q in ss.getQuestion){
      			if(q.isTypeOf(BackgroundQs)){
      				if(q.getName.isDefined()){
      					continue;
      				}else
      					return false;
      			}else
      				continue;
      		}
      	}
      	return true;	
      }
      message : 'USE-ME Survey Suggestion: "Name" of "Background Qs" should be set to better distinguish between different background questions.'
  	}
  	
  	constraint userProfileFromBackgroundQsIsAssociated { //for each BackgroundQs an User Profile must be associated
      guard : self.satisfies("questionIsDefined") and
              self.satisfies("userProfileIsDefined")
      
      check {
        var qName : String;
      	for(ss in self.getSurveySpecification){
      		for(q in ss.getQuestion){
      			if(q.isTypeOf(BackgroundQs)){
      				if(q.getUserProfile.size() >= 1){
      					continue;
      				}else
      					qName = q.getName;
      					return false;
      			}else
      				continue;
      		}
      	}
      	return true;	
      }
      message : 'USE-ME Survey Error: "User Profile" of "Background Qs ' + qName + '" should contain all the "User Profile" defined in "Participant".'
  	}
  	
  	critique logicalExpressionFromBackgroundQsIsAssociated { //for each BackgroundQs a Logical Expression should be associated
      guard : self.satisfies("questionIsDefined") and
              self.satisfies("logicalExpressionIsDefined") 
      
      check {
        var qName : String;
      	for(ss in self.getSurveySpecification){
      		for(q in ss.getQuestion){
      			if(q.isTypeOf(BackgroundQs)){
      				if(q.getLogicalExpression.size() >= 1){
      					continue;
      				}else
      					qName = q.getName;
      					return false;
      			}else
      				continue;
      		}
      	}
      	return true;	
      }
      message : 'USE-ME Survey Suggestion: "Logical Expression" of "Background Qs ' + qName + '" should be associated to define to which logical expression is the question related.'
  	}
  	
  	critique questionFromBackgroundQsIsDefined { //for each BackgroundQs a Question should be defined
      guard : self.satisfies("questionIsDefined")
      
      check {
        var qName : String;
      	for(ss in self.getSurveySpecification){
      		for(q in ss.getQuestion){
      			if(q.isTypeOf(BackgroundQs)){
      				if(q.getQuestion.isDefined()){
      					continue;
      				}else
      					qName = q.getName;
      					return false;
      			}else
      				continue;
      		}
      	}
      	return true;	
      }
      message : 'USE-ME Survey Suggestion: "Question" of "Background Qs ' + qName + '" should be set (e.g. demographic data, education).'
  	}
  	
  	critique questionnaireFromBackgroundQsIsAssociated { //for each BackgroundQs a Questionnaire should be associated
      guard : self.satisfies("questionIsDefined") and
              self.satisfies("questionnaireIsDefined") 
      
      check {
        var qName : String;
      	for(ss in self.getSurveySpecification){
      		for(q in ss.getQuestion){
      			if(q.isTypeOf(BackgroundQs)){
      				if(q.getQuestionnaire.isDefined()){
      					continue;
      				}else
      					qName = q.getName;
      					return false;
      			}else
      				continue;
      		}
      	}
      	return true;	
      }
      message : 'USE-ME Survey Suggestion: "Questionnaire" of "Background Qs ' + qName + '" should be associated to define which questionnaire is related to the background question.'
  	}
  	
  	critique scaleFromBackgroundQsIsDefined { //for each BackgroundQs a Scale should be defined
      guard : self.satisfies("questionIsDefined")
      
      check {
        var qName : String;
      	for(ss in self.getSurveySpecification){
      		for(q in ss.getQuestion){
      			if(q.isTypeOf(BackgroundQs)){
      				if(q.getScale.size() >= 1){
      					continue;
      				}else
      					qName = q.getName;
      					return false;
      			}else
      				continue;
      		}
      	}
      	return true;	
      }
      message : 'USE-ME Survey Suggestion: "Scale" of "Background Qs ' + qName + '" should be set (e.g int, M/F, scale).'
  	}
  	
  	critique typeFromBackgroundQsIsDefined { //for each BackgroundQs a Type should be defined
      guard : self.satisfies("questionIsDefined")
      
      check {
        var qName : String;
      	for(ss in self.getSurveySpecification){
      		for(q in ss.getQuestion){
      			if(q.isTypeOf(BackgroundQs)){
      				if(q.getType.isDefined()){
      					continue;
      				}else
      					qName = q.getName;
      					return false;
      			}else
      				continue;
      		}
      	}
      	return true;	
      }
      message : 'USE-ME Survey Suggestion: "Type" of "Background Qs ' + qName + '" should be set (e.g. demographics, experience, tendency).'
  	}
  	
  	critique nameFromFeedbackQsIsDefined { //for each FeedbackQs a Name should be defined
      guard : self.satisfies("questionIsDefined")
      
      check {
      	for(ss in self.getSurveySpecification){
      		for(q in ss.getQuestion){
      			if(q.isTypeOf(FeedbackQs)){
      				if(q.getName.isDefined()){
      					continue;
      				}else
      					return false;
      			}else
      				continue;
      		}
      	}
      	return true;	
      }
      message : 'USE-ME Survey Suggestion: "Name" of "Feedback Qs" should be set to better distinguish between different feedback questions.'
  	}
  	
  	critique questionFromFeedbackQsIsDefined { //for each FeedbackQs a Question should be defined
      guard : self.satisfies("questionIsDefined")
      
      check {
        var qName : String;
      	for(ss in self.getSurveySpecification){
      		for(q in ss.getQuestion){
      			if(q.isTypeOf(FeedbackQs)){
      				if(q.getQuestion.isDefined()){
      					continue;
      				}else
      					qName = q.getName;
      					return false;
      			}else
      				continue;
      		}
      	}
      	return true;	
      }
      message : 'USE-ME Survey Suggestion: "Question" of "Feedback Qs ' + qName + '" should be set (e.g. did you enjoy the activity?, did you find it difficult?).'
  	}
  	
  	critique questionnaireFromFeedbackQsIsAssociated { //for each FeedbackQs a Questionnaire should be associated
      guard : self.satisfies("questionIsDefined") and
              self.satisfies("questionnaireIsDefined") 
      
      check {
        var qName : String;
      	for(ss in self.getSurveySpecification){
      		for(q in ss.getQuestion){
      			if(q.isTypeOf(FeedbackQs)){
      				if(q.getQuestionnaire.isDefined()){
      					continue;
      				}else
      					qName = q.getName;
      					return false;
      			}else
      				continue;
      		}
      	}
      	return true;	
      }
      message : 'USE-ME Survey Suggestion: "Questionnaire" of "Feedback Qs ' + qName + '" should be associated to define which questionnaire is related to the feedback question.'
  	}
  	
  	critique scaleFromFeedbackQsIsDefined { //for each FeedbackQs a Scale should be defined
      guard : self.satisfies("questionIsDefined")
      
      check {
        var qName : String;
      	for(ss in self.getSurveySpecification){
      		for(q in ss.getQuestion){
      			if(q.isTypeOf(FeedbackQs)){
      				if(q.getScale.size() >= 1){
      					continue;
      				}else
      					qName = q.getName;
      					return false;
      			}else
      				continue;
      		}
      	}
      	return true;	
      }
      message : 'USE-ME Survey Suggestion: "Scale" of "Feedback Qs ' + qName + '" should be set (e.g. smiles scale).'
  	}
  	
  	critique scenarioFromFeedbackQsIsAssociated { //for each FeedbackQs a Scenario should be associated
      guard : self.satisfies("questionIsDefined") and
              self.satisfies("scenarioIsDefined")
      
      check {
        var qName : String;
      	for(ss in self.getSurveySpecification){
      		for(q in ss.getQuestion){
      			if(q.isTypeOf(FeedbackQs)){
      				if(q.getScenario.size() >= 1){
      					continue;
      				}else
      					qName = q.getName;
      					return false;
      			}else
      				continue;
      		}
      	}
      	return true;	
      }
      message : 'USE-ME Survey Suggestion: "Scenario" of "Feedback Qs ' + qName + '" should be associated to collect opinions and reactions for a specific scenario.'
  	}
  	
  	critique typeFromFeedbackQsIsDefined { //for each FeedbackQs a Type should be defined
      guard : self.satisfies("questionIsDefined")
      
      check {
        var qName : String;
      	for(ss in self.getSurveySpecification){
      		for(q in ss.getQuestion){
      			if(q.isTypeOf(FeedbackQs)){
      				if(q.getType.isDefined()){
      					continue;
      				}else
      					qName = q.getName;
      					return false;
      			}else
      				continue;
      		}
      	}
      	return true;	
      }
      message : 'USE-ME Survey Suggestion: "Type" of "Feedback Qs ' + qName + '" should be set (e.g. confidence, likeable).'
  	}
  	
}

context UseMeSpecification{ //PACKAGE REPORT SPECIFICATION
  	
  	constraint reportModelIsDefined { //for each Report Specification a Report Model must be defined
      guard : self.satisfies("reportSpecificationIsDefined")
      
      check {
      	var rsName : String;
      	for(rs in self.getReportSpecification){
      		if(rs.getReportModel.size() >= 1){
      			continue;
      		}else
				rsName = rs.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Report Error: Create Child "Report Model" in Parent "Report Specification ' + rsName + '" to encapsulate the results of the experiment and to take into consideration suggestions.'
  	}
  	
  	critique nameFromReportModelIsDefined { //for each Report Model a Name must be defined
      guard : self.satisfies("reportModelIsDefined") 
      
      check {
      	for(rs in self.getReportSpecification){
	    	for (rm in rs.getReportModel){
	      		if(rm.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	    }
	    return true;	
      }
      message : 'USE-ME Report Suggestion: "Name" of "Report Model" should be set to better distinguish between different report models.'
  	}

  	constraint evaluationResultIsDefined { //for each Report Specification an Evaluation Result must be defined
      guard : self.satisfies("reportModelIsDefined")
      
      check {
      	var rsName : String;
      	for(rs in self.getReportSpecification){
      		if(rs.getEvaluationResult.size() >= 1){
      			continue;
      		}else
				rsName = rs.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Report Error: Create Child "Evaluation Result" in Parent "Report Specification ' + rsName + '" to represent the results obtained.'
  	}
  	
  	critique nameFromEvaluationResultIsDefined { //for each Evaluation Result a Name must be defined
      guard : self.satisfies("evaluationResultIsDefined") 
      
      check {
      	for(rs in self.getReportSpecification){
	    	for (er in rs.getEvaluationResult){
	      		if(er.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Report Suggestion: "Name" of "Evaluation Result" should be set to better distinguish between different evaluation results.'
  	}
  	
  	constraint evaluationContextFromEvaluationResultIsAssociated { //for each Evaluation Result an Evaluation Context must be associated
      guard : self.satisfies("evaluationResultIsDefined") and
              self.satisfies("evaluationContextIsDefined") 
      
      check {
      	var erName : String;
      	for(rs in self.getReportSpecification){
	    	for (er in rs.getEvaluationResult){
	      		if(er.getEvaluationContext.isDefined()){
	      			continue;
	      		}else
	      			erName = er.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Report Error: "Evaluation Context" of "Evaluation Result ' + erName + '" must be associated to specify the evaluation context.'
  	}
  	
  	critique interactionResultFromEvaluationResultIsAssociated { //for each Evaluation Result an Interaction Result should be associated
      guard : self.satisfies("evaluationResultIsDefined") and
              self.satisfies("interactionResultIsDefined")
      
      check {
      	var erName : String;
      	for(rs in self.getReportSpecification){
	    	for (er in rs.getEvaluationResult){
	      		if(er.getInteractionResult.size() >= 1){
	      			continue;
	      		}else
	      			erName = er.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Report Suggestion: "Interaction Result" of "Evaluation Result ' + erName + '" should be associated to specify the interaction results.'
  	}
  	
  	critique outsideRefFromEvaluationResultIsAssociated { //for each Evaluation Result an Outside Ref should be associated
      guard : self.satisfies("evaluationResultIsDefined") and
              self.satisfies("outsideRefIsDefined") 
      
      check {
      	var erName : String;
      	for(rs in self.getReportSpecification){
	    	for (er in rs.getEvaluationResult){
	      		if(er.getOutsifeReference.size() >= 1){
	      			continue;
	      		}else
	      			erName = er.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Report Suggestion: "Outsife Reference" of "Evaluation Result ' + erName + '" should be associated to refer to an outside reference.'
  	}
  	
  	constraint reportModelFromEvaluationResultIsAssociated { //for each Evaluation Result a Report Model must be associated
      guard : self.satisfies("evaluationResultIsDefined") and
              self.satisfies("reportModelIsDefined") 
      
      check {
      	var erName : String;
      	for(rs in self.getReportSpecification){
	    	for (er in rs.getEvaluationResult){
	      		if(er.getReportModel.size() >= 1){
	      			continue;
	      		}else
	      			erName = er.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Report Error: "Report Model" of "Evaluation Result ' + erName + '" must be associated to specify the report model.'
  	}
  	
  	critique surveyResultFromEvaluationResultIsAssociated { //for each Evaluation Result a Survey Result should be associated
      guard : self.satisfies("evaluationResultIsDefined") and
              self.satisfies("surveyResultIsDefined") 
      
      check {
      	var erName : String;
      	for(rs in self.getReportSpecification){
	    	for (er in rs.getEvaluationResult){
	      		if(er.getSurveyResult.size() >= 1){
	      			continue;
	      		}else
	      			erName = er.getName;
	      			return false;
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Report Suggestion: "Survey Result" of "Evaluation Result ' + erName + '" should be associated to define the survey result.'
  	}
  	
  	critique resultValueFromEvaluationResultIsDefined { //for each Evaluation Result a Result Value should be defined
      guard : self.satisfies("evaluationResultIsDefined") and
              self.satisfies("evaluationContextFromEvaluationResultIsAssociated") and
              self.satisfies("reportModelFromEvaluationResultIsAssociated")
      
      check {
      	var erName : String;
      	for(rs in self.getReportSpecification){
	    	for (er in rs.getEvaluationResult){
	    		if(er.getResultValue.size() >= 1){
	      			continue;
	      		}else
	      			erName = er.getName;
	      			return false;
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Report Suggestion: Create Child "Result Value" in Parent "Evaluation Result ' + erName + '" to define the results obtained.'
  	}
  	
  	critique resultValueFromEvaluationResultIsDefined { //for each Evaluation Result a Result Value should be defined
      guard : self.satisfies("resultValueFromEvaluationResultIsDefined") and
              self.satisfies("interactionResultFromEvaluationResultIsAssociated") and
              self.satisfies("surveyResultFromEvaluationResultIsAssociated")
      
      check {
      	var erName : String;
      	for(rs in self.getReportSpecification){
	    	for (er in rs.getEvaluationResult){
	    		if(er.getResultValue.size() == (er.getInteractionResult.size() + er.getSurveyResult.size())){
	      			continue;
	      		}else
	      			erName = er.getName;
	      			return false;
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Report Suggestion: Create Child "Result Value" in Parent "Evaluation Result ' + erName + '" for each "Interaction Result" and "Survey Result".'
  	}
  	
  	critique nameFromResultValueIsDefined { //for each Result Value a Name should be defined
      guard : self.satisfies("resultValueFromEvaluationResultIsDefined") 
      
      check {
      	for(rs in self.getReportSpecification){
	    	for (er in rs.getEvaluationResult){
	    		for(rv in er.getResultValue){
	    			if(rv.getName.isDefined()){
	      				continue;
	      			}else
	      				return false;
	    		}
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Report Suggestion: "Name" of "Result Value" should be set to better distinguish between different result values.'
  	}
  	
  	critique associatedRequirementFromResultValueIsAssociated { //for each Result Value an Associated Requirement should be associated
      guard : self.satisfies("resultValueFromEvaluationResultIsDefined") and 
              (self.satisfies("requirementIsDefined") or
              self.satisfies("usabilityRequirementIsDefined"))
      
      check {
      	var rvName : String;
      	for(rs in self.getReportSpecification){
	    	for (er in rs.getEvaluationResult){
	    		for(rv in er.getResultValue){
	    			if(rv.getAssociatedRequirement.size() >= 1){
	      				continue;
	      			}else
	      				rvName = rv.getName;
	      				return false;
	    		}
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Report Suggestion: "Associated Requirement" of "Result Value ' + rvName + '" should be associated to a specific requirement.'
  	}
  	
  	constraint languageFromResultValueIsAssociated { //for each Result Value a Language should be associated
      guard : self.satisfies("resultValueFromEvaluationResultIsDefined") and 
              self.satisfies("languageIsDefined") 
      
      check {
      	var rvName : String;
      	for(rs in self.getReportSpecification){
	    	for (er in rs.getEvaluationResult){
	    		for(rv in er.getResultValue){
	    			if(rv.getLanguage.isDefined()){
	      				continue;
	      			}else
	      				rvName = rv.getName;
	      				return false;
	    		}
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Report Error: "Language" of "Result Value ' + rvName + '" must be associated to a language under evaluation.'
  	}
  	
  	critique relatedActionFromResultValueIsAssociated { //for each Result Value a Related Action should be associated
      guard : self.satisfies("resultValueFromEvaluationResultIsDefined") and 
              self.satisfies("captureActionIsDefined") 
      
      check {
      	var rvName : String;
      	for(rs in self.getReportSpecification){
	    	for (er in rs.getEvaluationResult){
	    		for(rv in er.getResultValue){
	    			if(rv.getRelatedAction.size() >= 1){
	      				continue;
	      			}else
	      				rvName = rv.getName;
	      				return false;
	    		}
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Report Suggestion: "Related Action" of "Result Value ' + rvName + '" should be associated to a capture action involved.'
  	}
  	
  	critique relatedQuestionFromResultValueIsAssociated { //for each Result Value a Related Question should be associated
      guard : self.satisfies("resultValueFromEvaluationResultIsDefined") and
              self.satisfies("questionIsDefined") 
      
      check {
      	var rvName : String;
      	for(rs in self.getReportSpecification){
	    	for (er in rs.getEvaluationResult){
	    		for(rv in er.getResultValue){
	    			if(rv.getRelatedQuestion.size() >= 1){
	      				continue;
	      			}else
	      				rvName = rv.getName;
	      				return false;
	    		}
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Report Suggestion: "Related Question" of "Result Value ' + rvName + '" should be associated to a question in the questionnaire.'
  	}
  	
  	constraint resultValueFromResultValueIsDefined { //for each Result Value a Result Value should be defined
      guard : self.satisfies("resultValueFromEvaluationResultIsDefined") 
      
      check {
      	var rvName : String;
      	for(rs in self.getReportSpecification){
	    	for (er in rs.getEvaluationResult){
	    		for(rv in er.getResultValue){
	    			if(rv.getResultValue.isDefined()){
	      				continue;
	      			}else
	      				rvName = rv.getName;
	      				return false;
	    		}
	      	}
	   }
	   return true;	
      }
      message : 'USE-ME Report Error: "Result Value" of "Result Value ' + rvName + '" must be set.'
  	}
  	
  	constraint recommendedGMIsDefined { //for each Report Specification a RecommendedGM must be defined
      guard : self.satisfies("evaluationResultIsDefined") and
              self.satisfies("evaluationContextFromEvaluationResultIsAssociated") and
              self.satisfies("reportModelFromEvaluationResultIsAssociated") and 
              self.satisfies("resultValueFromResultValueIsDefined") and 
              self.satisfies("languageFromResultValueIsAssociated")
       
      check {
      	var rsName : String;
      	for(rs in self.getReportSpecification){
      		if(rs.getRecommendedGM.size() >= 1){
      			continue;
      		}else
				rsName = rs.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Report Error: Create Child "Recommended GM" in Parent "Report Specification ' + rsName + '" to include updates (changes or new goals) to the previous goal model.'
  	}
  	
  	critique nameFromRecommendedGMIsDefined { //for each RecommendedGM a Name must be defined
      guard : self.satisfies("recommendedGMIsDefined") 
      
      check {
      	for(rs in self.getReportSpecification){
	    	for (r in rs.getRecommendedGM){
	      		if(r.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Report Suggestion: "Name" of "Recommended GM" should be set to better distinguish between different recommended goal models.'
  	}
  	
  	constraint refersToFromRecommendedGMIsAssociated { //for each RecommendedGM a RefersTo must be associated
      guard : self.satisfies("recommendedGMIsDefined") and
              self.satisfies("goalModelIsDefined")
      
      check {
      	var rName : String;
      	for(rs in self.getReportSpecification){
	    	for (r in rs.getRecommendedGM){
	      		if(r.getRefersTo.isDefined()){
	      			continue;
	      		}else
	      			rName = r.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Report Error: "Refers To" of "Recommended GM ' + rName + '" must be associated to the goal model evaluated.'
  	}
  	
  	constraint reportModelFromRecommendedGMIsAssociated { //for each RecommendedGM a Report Model must be associated
      guard : self.satisfies("recommendedGMIsDefined") and
              self.satisfies("reportModelIsDefined") 
      
      check {
      	var rName : String;
      	for(rs in self.getReportSpecification){
	    	for (r in rs.getRecommendedGM){
	      		if(r.getReportModel.isDefined()){
	      			continue;
	      		}else
	      			rName = r.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Report Error: "Report Model" of "Recommended GM ' + rName + '" must be associated to the report model that was evaluated.'
  	}
  	
  	critique functionalGoalFromRecommendedGMIsAssociated { //for each RecommendedGM a Functional Goal should be associated
      guard : self.satisfies("recommendedGMIsDefined") and
      		  self.satisfies("functionalGoalIsDefined")
      
      check {
      	var rName : String;
      	for(rs in self.getReportSpecification){
	    	for (r in rs.getRecommendedGM){
	      		if(r.getFunctionalGoal.size() >= 1){
	      			continue;
	      		}else
	      			rName = r.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Report Suggestion: "Functional Goal" of "Recommended GM ' + rName + '" should be associated to the functional goals that should improve in the next iteration.'
  	}
  	
  	critique suggestedRequirementsFromRecommendedGMIsAssociated { //for each RecommendedGM a Suggested Requirements should be associated
      guard : self.satisfies("recommendedGMIsDefined") and
      		  (self.satisfies("requirementIsDefined") or
      		  self.satisfies("usabilityRequirementIsDefined"))
      
      check {
      	var rName : String;
      	for(rs in self.getReportSpecification){
	    	for (r in rs.getRecommendedGM){
	      		if(r.getSuggestedRequirements.size() >= 1){
	      			continue;
	      		}else
	      			rName = r.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Report Suggestion: "Suggested Requirements" of "Recommended GM ' + rName + '" should be associated to suggest requirements that should improve.'
  	}
  	
  	critique usabilityGoalFromRecommendedGMIsAssociated { //for each RecommendedGM an Usability Goal should be associated
      guard : self.satisfies("recommendedGMIsDefined") and
      		  self.satisfies("usabilityGoalIsDefined") 
      
      check {
      	var rName : String;
      	for(rs in self.getReportSpecification){
	    	for (r in rs.getRecommendedGM){
	      		if(r.getUsabilityGoal.size() >= 1){
	      			continue;
	      		}else
	      			rName = r.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Report Suggestion: "Usability Goal" of "Recommended GM ' + rName + '" should be associated to the usability goal that should improve in the next iteration.'
  	}
  		
}

context UseMeSpecification{ //PACKAGE UTILITY SPECIFICATION
  	
  	constraint DSLIsDefined { //if there is a existing DSL under development
      guard : self.satisfies("utilitySpecificationIsDefined") 
      
      check {
      	var usName : String;
      	for(us in self.getUtilitySpecification){
      		if(us.getDSL.size() >= 1){
      			continue;
      		}else
				usName = us.getName;
      			return false;
      	}
      	return true;	
      }
      message : 'USE-ME Utility Error: Create Child "DSL" in Parent "Specification ' + usName + '" to specify the DSL under development.'
  	}
  	
  	constraint dslNameFromDSLIsDefined { //for each DSL a Dsl Name must be defined
      guard : self.satisfies("DSLIsDefined")
      
      check {
      	for(us in self.getUtilitySpecification){
	    	for (d in us.getDSL){
	      		if(d.getDslName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Utility Error: "Dsl Name" of "DSL" must be set to better distinguish between different DSLs.'
  	}
  	
  	critique existingGoalModelFromDSLIsDefined { //if there is a existing Goal Model
      guard : self.satisfies("DSLIsDefined")
      
      check {
      	var dName : String;
      	for(us in self.getUtilitySpecification){
	    	for (d in us.getDSL){
	      		if(d.getExistingGoalModel.size() >= 1){
	      			continue;
	      		}else
	      			dName = d.getDslName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Utility Suggestion: Create Child "Existing GM" in Parent "DSL ' + dName + '" to reuse the knowledge from a previous developed Goal Model.'
  	}
  	
  	critique nameFromExistingGoalModelIsDefined { //for each Existing Goal Model a Name should be defined
      guard : self.satisfies("existingGoalModelFromDSLIsDefined") 
      
      check {
	      	for(us in self.getUtilitySpecification){
	      		for (d in us.getDSL){
	      			for(egm in d.getExistingGoalModel){
	      				if(egm.getName.isDefined()){
	      					continue;
	      				}else
	      					return false;
	      			}
	      		}
	      	}	
	      	return true;
      }
      message : 'USE-ME Utility Suggestion: "Name" of "Existing GM" should be set to better distinguish between different existing goal models.'
  	}
  	
  	critique concreteSyntaxFromDSLIsDefined { //if there is a existing Concrete Syntax
      guard : self.satisfies("DSLIsDefined") 
      
      check {
      	var dName : String;
      	for(us in self.getUtilitySpecification){
	    	for (d in us.getDSL){
	      		if(d.getConcreteSyntax.size() >= 1){
	      			continue;
	      		}else
	      			dName = d.getDslName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Utility Suggestion: Create Child "Concrete Syntax" in Parent "DSL ' + dName + '" to associate a Concrete Syntax.'
  	}
  	
  	critique nameFromConcreteSyntaxIsDefined { //for each Existing Concrete Syntax a Name should be defined
      guard : self.satisfies("concreteSyntaxFromDSLIsDefined") 
      
      check {
	      	for(us in self.getUtilitySpecification){
	      		for (d in us.getDSL){
	      			for(cs in d.ConcreteSyntax){
	      				if(cs.getName.isDefined()){
	      					continue;
	      				}else
	      					return false;
	      			}
	      		}
	      	}	
	      	return true;
      }
      message : 'USE-ME Utility Suggestion: "Name" of "Concrete Syntax" should be set to better distinguish between different concrete syntaxes.'
  	}
  	
  	critique abstractSyntaxFromDSLIsDefined { //if there is a existing Abstract Syntax
      guard : self.satisfies("DSLIsDefined")
      
      check {
      	var dName : String;
      	for(us in self.getUtilitySpecification){
	    	for (d in us.getDSL){
	      		if(d.getAbstractSyntax.size() >= 1){
	      			continue;
	      		}else
	      			dName = d.getDslName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Utility Suggestion: Create Child "Abstract Syntax" in Parent "DSL ' + dName + '" to associate an Abstract Syntax.'
  	}
  	
  	critique nameFromAbstractSyntaxIsDefined { //for each Existing Abstract Syntax a Name should be defined
      guard : self.satisfies("abstractSyntaxFromDSLIsDefined") 
      
      check {
	      	for(us in self.getUtilitySpecification){
	      		for (d in us.getDSL){
	      			for(s in d.getAbstractSyntax){
	      				if(s.getName.isDefined()){
	      					continue;
	      				}else
	      					return false;
	      			}
	      		}
	      	}	
	      	return true;
      }
      message : 'USE-ME Utility Suggestion: "Name" of "Abstract Syntax" should be set to better distinguish between different abstract syntaxes.'
  	}
  	
  	constraint csOrAsFromDSLIsCheck { //Abstract Syntax and/or Concrete Syntax must be defined
      guard : self.satisfies("DSLIsDefined") 
      
      check {
      	var dName : String;
      	for(us in self.getUtilitySpecification){
	    	for (d in us.getDSL){
	      		if((d.getConcreteSyntax.size() + d.getAbstractSyntax.size()) >= 1){
	      			continue;
	      		}else
	      			dName = d.getDslName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Utility Error: Create Child "Concrete Syntax" and/or "Abstract Syntax" in Parent "DSL ' + dName + '".'
  	}
  	
  	critique documentationFromDSLIsAssociated { //for each DSL a Documentation should be associated
      guard : self.satisfies("DSLIsDefined") and
      		  self.satisfies("docIsDefined") 
      
      check {
      	var dName : String;
      	for(us in self.getUtilitySpecification){
	    	for (d in us.getDSL){
	      		if(d.getDocumentation.size() >= 1){
	      			continue;
	      		}else
	      			dName = d.getDslName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Utility Suggestion: "Documentation" of "DSL ' + dName + '" should be associated to refer to existing documents (e.g. videos, presentations, ...).'
  	}
  	
  	critique functionalGoalIsDefined { //if there is a existing Functional Goal 
      guard : self.satisfies("utilitySpecificationIsDefined") and 
      	      self.satisfies("DSLIsDefined") and 
      	      self.satisfies("csOrAsFromDSLIsCheck")
      
      check {
      	var usName : String;
      	for(us in self.getUtilitySpecification){
      		if(us.getFunctionalGoal.size() >= 1){
      			continue;
      		}else
				usName = us.getName;
      			return false;
      	}
      	return true;	
      }
	  message : 'USE-ME Utility Suggestion: Create Child "Functional Goal" in Parent "Specification ' + usName + '" to specify/reuse functional goals.'  	
  	}
  	
  	critique nameFromFunctionalGoalIsDefined { //for each Functional Goal a Name should be defined
      guard : self.satisfies("functionalGoalIsDefined") 
      
      check {
      	for(us in self.getUtilitySpecification){
	    	for (fg in us.getFunctionalGoal){
	      		if(fg.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Utility Suggestion: "Name" of "Functional Goal" should be set to better distinguish between different functional goals.'
  	}
  	
  	critique existingGMFromFunctionalGoalIsAssociated { //for each Functional Goal if a ExistingGM was defined then it should be associated
      guard : self.satisfies("functionalGoalIsDefined") and
      	      self.satisfies("existingGoalModelFromDSLIsDefined") 
      
      check {
        var fgName : String;
      	for(us in self.getUtilitySpecification){
	    	for (fg in us.getFunctionalGoal){
	      		if(fg.getExistingGM.size() >= 1){
	      			continue;
	      		}else
	      			fgName = fg.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Utility Suggestion: "Existing GM" of "Functional Goal ' + fgName + '" should be associated to refer to a specific goal model.'
  	}
  	
  	critique requirementsFromFunctionalGoalIsAssociated { //for each Functional Goal a Requirements should be associated
      guard : self.satisfies("functionalGoalIsDefined") and
      	      (self.satisfies("requirementIsDefined") or
      	      self.satisfies("usabilityRequirementIsDefined")) 
      
      check {
        var fgName : String;
      	for(us in self.getUtilitySpecification){
	    	for (fg in us.getFunctionalGoal){
	      		if(fg.getRequirements.size() >= 1){
	      			continue;
	      		}else
	      			fgName = fg.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Utility Suggestion: "Requirement" of "Functional Goal ' + fgName + '" should be associated to define the functional goal requirements.'
  	}
  	
  	critique processModelIsDefined { //if there is a existing Process Model 
      guard : self.satisfies("utilitySpecificationIsDefined") and 
      	      self.satisfies("DSLIsDefined") and 
      	      self.satisfies("csOrAsFromDSLIsCheck")
      
      check {
      	var usName : String;
      	for(us in self.getUtilitySpecification){
      		if(us.getProcessModel.size() >= 1){
      			continue;
      		}else
				usName = us.getName;
      			return false;
      	}
      	return true;	
      }
  	  message : 'USE-ME Utility Suggestion: Create Child "Process Model" in Parent "Specification" to refer to business process models previously designed.'
  	}
  	
  	critique nameFromProcessModelIsDefined { //for each Process Model a Name should be defined
      guard : self.satisfies("processModelIsDefined") 
      
      check {
      	for(us in self.getUtilitySpecification){
	    	for (pm in us.getProcessModel){
	      		if(pm.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Utility Suggestion: "Name" of "Process Model" should be set to better distinguish between different process models.'
  	}
  	
  	critique outsideRefFromProcessModelIsAssociated { //for each Process Model an OutsideRef should be associated
      guard : self.satisfies("processModelIsDefined") and
              self.satisfies("outsideRefIsDefined") 
      
      check {
      	var pmName : String;
      	for(us in self.getUtilitySpecification){
	    	for (pm in us.getProcessModel){
	      		if(pm.getOutsideRef.isDefined()){
	      			continue;
	      		}else
	      			pmName = pm.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Utility Suggestion: "Outside Ref" of "Process Model ' + pmName + '" should be associated to refer to an existing outside reference.'
  	}
  	
  	critique surveyEngineIsDefined { //if there is an existing Survey Engine
      guard : self.satisfies("utilitySpecificationIsDefined") and 
      	      self.satisfies("DSLIsDefined") and 
      	      self.satisfies("csOrAsFromDSLIsCheck")
      
      check {
      	var usName : String;
      	for(us in self.getUtilitySpecification){
      		if(us.getSurveyEngine.size() >= 1){
      			continue;
      		}else
				usName = us.getName;
      			return false;
      	}
      	return true;	
      }
  	  message : 'USE-ME Utility Suggestion: Create Child "Survey Engine" in Parent "Specification ' + usName + '" to connected to an existing survey platform (e.g. Google Forms, ...).'
  	}
  	
  	constraint surveyModelFromSurveyEngineIsAssociated { //for each Survey Engine a Survey Model must be associated
      guard : self.satisfies("surveyEngineIsDefined") and
              self.satisfies("surveyModelIsDefined") 
      
      check {
      	for(us in self.getUtilitySpecification){
	    	for (se in us.getSurveyEngine){
	      		if(se.getSurveyModel.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Error: Property "Survey Model" of Element "Survey Engine" must be set.'
  	}
  	
  	critique docIsDefined { //if there is an existing Documentation
      guard : self.satisfies("utilitySpecificationIsDefined") and 
      	      self.satisfies("DSLIsDefined") and 
      	      self.satisfies("csOrAsFromDSLIsCheck")
      
      check {
      	var usName : String;
      	for(us in self.getUtilitySpecification){
      		if(us.getDocumentation.size() >= 1){
      			continue;
      		}else
				usName = us.getName;
      			return false;
      	}
      	return true;	
      }
  	  message : 'USE-ME Utility Suggestion: Create Child "Documentation" in Parent "Specification ' + usName + '" to reffer to existing documentation (e.g. videos, presentations, ...).'
  	}
  	
  	critique nameFromDocIsDefined { //for each Documentation a Name should be defined
      guard : self.satisfies("docIsDefined") 
      
      check {
      	for(us in self.getUtilitySpecification){
	    	for (d in us.getDocumentation){
	      		if(d.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Utility Suggestion: "Name" of "Documentation" should be set to better distinguish between different documents.'
  	}
  	
  	critique outsideRefFromDocIsDefined { //for each Documentation an Outside Ref should be defined
      guard : self.satisfies("docIsDefined") and
              self.satisfies("outsideRefIsDefined") 
      
      check {
      	var dName : String;
      	for(us in self.getUtilitySpecification){
	    	for (d in us.getDocumentation){
	      		if(d.getOutsideRef.isDefined()){
	      			continue;
	      		}else
	      			dName = d.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Utility Suggestion: "Outside Ref" of "Documentation ' + dName + '" should be associated to refer to an existing outside reference.'
  	}
  	
  	critique outsideRefIsDefined { //if there is an existing OutsideRef 
      guard : (self.satisfies("processModelIsDefined") or 
      		  self.satisfies("surveyEngineIsDefined") or
      		  self.satisfies("docIsDefined")) and
              self.satisfies("utilitySpecificationIsDefined") 
      
      check {
      	var usName : String;
      	for(us in self.getUtilitySpecification){
      		if(us.getOutsideRef.size() >= 1){
      			continue;
      		}else
				usName = us.getName;
      			return false;
      	}
      	return true;	
      }
  	  message : 'USE-ME Utility Suggestion: Create Child "Outside Ref" in Parent "Specification ' + usName + '" to refer to Process Model, Documentation or Survey Engine outside references.'
  	}
  	
  	critique nameFromOutsideRefIsDefined { //for each OutsideRef a Name should be defined
      guard : self.satisfies("outsideRefIsDefined") 
      
      check {
      	for(us in self.getUtilitySpecification){
	    	for (o in us.getOutsideRef){
	      		if(o.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Utility Suggestion: "Name" of "OutsideRef" should be set to better distinguish between different outside references.'
  	}
  	
  	critique linkFromOutsideRefIsDefined { //for each OutsideRef a Link should be defined
      guard : self.satisfies("outsideRefIsDefined") 
      
      check {
      	var oName : String;
      	for(us in self.getUtilitySpecification){
	    	for (o in us.getOutsideRef){
	      		if(o.getLink.size() >= 1){
	      			continue;
	      		}else
	      			oName = o.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Utility Suggestion: "Link" of "Outside Ref ' + oName + '" should be set to define the link to the outside reference.'
  	}
  	
  	/*critique outsideRefFromOutsideRefIsAssociated { //for each OutsideRef an OutsideRef should be associated
      guard : self.satisfies("outsideRefIsDefined") 
      
      check {
      	var oName : String;
      	for(us in self.getUtilitySpecification){
	    	for (o in us.getOutsideRef){
	      		if(o.getOutsideRef.isDefined()){
	      			continue;
	      		}else
	      			oName = o.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Utility Suggestion: "Outside Ref" of "Outside Ref ' + oName + '" should be associated.'
  	}*/
  	
  	critique toolFromOutsideRefIsDefined { //for each OutsideRef a Tool should be defined
      guard : self.satisfies("outsideRefIsDefined") 
      
      check {
      	var oName : String;
      	for(us in self.getUtilitySpecification){
	    	for (o in us.getOutsideRef){
	      		if(o.getTool.size() >= 1){
	      			continue;
	      		}else
	      			oName = o.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Utility Suggestion: "Tool" of "Outside Ref ' + oName + '" should be set to define the tool used.'
  	}
  	
  	critique requirementIsDefined { //if there is an existing Requirement 
      guard : self.satisfies("utilitySpecificationIsDefined") and 
              self.satisfies("functionalGoalIsDefined")
      
      check {
      	var usName : String;
      	for(us in self.getUtilitySpecification){
      		if(us.getRequirement.size() >= 1){
      			continue;
      		}else
				usName = us.getName;
      			return false;
      	}
      	return true;	
      }
  	  message : 'USE-ME Utility Suggestion: Create Child "Requirement" in Parent "Specification ' + usName + '" to define the DSL requirements.'
  	}
  	
  	critique nameFromRequirementIsDefined { //for each Requirement a Name should be defined
      guard : self.satisfies("requirementIsDefined") 
      
      check {
      	for(us in self.getUtilitySpecification){
	    	for (r in us.getRequirement){
	      		if(r.getName.isDefined()){
	      			continue;
	      		}else
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Utility Suggestion: "Name" of "Requirement" should be set to better distinguish between different requirements.'
  	}
  	
  	critique descriptionFromRequirementIsDefined { //for each Requirement a Description should be defined
      guard : self.satisfies("requirementIsDefined") 
      
      check {
      	var rName : String;
      	for(us in self.getUtilitySpecification){
	    	for (r in us.getRequirement){
	      		if(r.getDescription.isDefined()){
	      			continue;
	      		}else
	      			rName = r.getName;
	      			return false;
	      		}
	   }
	   return true;	
      }
      message : 'USE-ME Utility Suggestion: "Description" of "Requirement ' + rName + '" should be set.'
  	}
  	
}

